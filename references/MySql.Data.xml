<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MySql.Data</name>
    </assembly>
    <members>
        <member name="T:MySql.Data.MySqlClient.CustomInstaller">
            <summary>
            We are adding a custom installer class to our assembly so our installer
            can make proper changes to the machine.config file.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.CustomInstaller.Install(System.Collections.IDictionary)">
            <summary>
            We override Install so we can add our assembly to the proper
            machine.config files.
            </summary>
            <param name="stateSaver"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.CustomInstaller.Uninstall(System.Collections.IDictionary)">
            <summary>
            We override Uninstall so we can remove out assembly from the
            machine.config files.
            </summary>
            <param name="savedState"></param>
        </member>
        <member name="T:MySql.Data.Types.MySqlDateTime">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new <b>MySqlDateTime</b> object by setting the individual time properties to
            the given values.
            </summary>
            <param name="year">The year to use.</param>
            <param name="month">The month to use.</param>
            <param name="day">The day to use.</param>
            <param name="hour">The hour to use.</param>
            <param name="minute">The minute to use.</param>
            <param name="second">The second to use.</param>
        </member>
        <member name="M:MySql.Data.Types.MySqlDateTime.#ctor(System.DateTime)">
            <summary>
            Constructs a new <b>MySqlDateTime</b> object by using values from the given <see cref="T:System.DateTime"/> object.
            </summary>
            <param name="dt">The <see cref="T:System.DateTime"/> object to copy.</param>
        </member>
        <member name="M:MySql.Data.Types.MySqlDateTime.#ctor(MySql.Data.Types.MySqlDateTime)">
            <summary>
            Constructs a new <b>MySqlDateTime</b> object by copying the current value of the given object.
            </summary>
            <param name="mdt">The <b>MySqlDateTime</b> object to copy.</param>
        </member>
        <member name="M:MySql.Data.Types.MySqlDateTime.#ctor(System.String)">
            <summary>
            Enables the contruction of a <b>MySqlDateTime</b> object by parsing a string.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:MySql.Data.Types.MySqlDateTime.GetDateTime">
            <summary>Returns this value as a DateTime</summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlDateTime.ToString">
            <summary>Returns a MySQL specific string representation of this value</summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlDateTime.op_Explicit(MySql.Data.Types.MySqlDateTime)~System.DateTime">
            <summary></summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.IsValidDateTime">
            <summary>
            Indicates if this object contains a value that can be represented as a DateTime
            </summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Year">
            <summary>Returns the year portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Month">
            <summary>Returns the month portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Day">
            <summary>Returns the day portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Hour">
            <summary>Returns the hour portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Minute">
            <summary>Returns the minute portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Second">
            <summary>Returns the second portion of this datetime</summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Millisecond">
            <summary>
            Retrieves the millisecond value of this object.
            </summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.IsNull">
            <summary>
            Returns true if this datetime object has a null value
            </summary>
        </member>
        <member name="P:MySql.Data.Types.MySqlDateTime.Value">
            <summary>
            Retrieves the value of this <see cref="T:MySql.Data.Types.MySqlDateTime"/> as a DateTime object.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlPool">
            <summary>
            Summary description for MySqlPool.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlPool.CheckoutConnection">
            <summary>
            CheckoutConnection handles the process of pulling a driver
            from the idle pool, possibly resetting its state,
            and adding it to the in use pool.  We assume that this method is only
            called inside an active lock so there is no need to acquire a new lock.
            </summary>
            <returns>An idle driver object</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlPool.GetPooledConnection">
            <summary>
            It is assumed that this method is only called from inside an active lock.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlPool.CreateNewPooledConnection">
            <summary>
            It is assumed that this method is only called from inside an active lock.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlPool.RemoveConnection(MySql.Data.MySqlClient.Driver)">
            <summary>
            Removes a connection from the in use pool.  The only situations where this method 
            would be called are when a connection that is in use gets some type of fatal exception
            or when the connection is being returned to the pool and it's too old to be 
            returned.
            </summary>
            <param name="driver"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlPool.Clear">
            <summary>
            Clears this pool of all idle connections and marks this pool and being cleared
            so all other connections are closed when they are returned.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlPool.HasIdleConnections">
            <summary>
            It is assumed that this property will only be used from inside an active
            lock.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlPool.BeingCleared">
            <summary>
            Indicates whether this pool is being cleared.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.Driver">
            <summary>
            Summary description for BaseDriver.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.Driver.LoadCharacterSets">
            <summary>
            Loads all the current character set names and ids for this server 
            into the charSets hashtable
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlPoolManager">
            <summary>
            Summary description for MySqlPoolManager.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.Logger">
            <summary>
            Provides methods to output messages to our log
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlCommand">
            <summary>Represents a SQL statement to execute against a MySQL database. This class cannot be inherited.</summary><remarks>
      <B>MySqlCommand</B> features the following methods for executing commands at a MySQL database:
      <list type="table">
        <listheader>
          <term>Item</term>
          <term>Description</term>
        </listheader>
        <item>
          <term>
            <a href="MySql.Data.MySqlClient.MySqlCommand.ExecuteReader_overloads.html">ExecuteReader</a>
          </term>
          <description>Executes commands that return rows.</description>
        </item>
        <item>
          <term>
            <a href="MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery.html">ExecuteNonQuery</a>
          </term>
          <description>Executes commands such as SQL INSERT, DELETE, and UPDATE statements.</description>
        </item>
        <item>
          <term>
            <a href="MySql.Data.MySqlClient.MySqlCommand.ExecuteScalar.html">ExecuteScalar</a>
          </term>
          <description>Retrieves a single value (for example, an aggregate value) from a database.</description>
        </item>
      </list>

      You can reset the <B>CommandText</B> property and reuse the <B>MySqlCommand</B>
      object. However, you must close the <A href="MySql.Data.MySqlClient.MySqlDataReader.html">MySqlDataReader</A>
      before you can execute a new or previous command.

      If a <A href="MySql.Data.MySqlClient.MySqlException.html">MySqlException</A> is
      generated by the method executing a <B>MySqlCommand</B>, the <A href="MySql.Data.MySqlClient.MySqlConnection.html">MySqlConnection</A>
      remains open.  It is the responsibility of the programmer to close the connection.

      <note>
        Using the '@' symbol for paramters is now the preferred approach although the old pattern of using
		'?' is still supported.  Please be aware though that using '@' can cause conflicts when user variables
		are also used.  To help with this situation please see the documentation on the 'allow user variables'
		connection string option.  The 'old syntax' connection string option has now been deprecated.
      </note>
    </remarks><example>
      The following example creates a <A href="frlrfsystemdatasqlclientsqlcommandclasstopic.htm">MySqlCommand</A> and
      a <B>MySqlConnection</B>. The <B>MySqlConnection</B> is opened and set as the <A href="frlrfsystemdatasqlclientsqlcommandclassconnectiontopic.htm">Connection</A>
      for the <B>MySqlCommand</B>. The example then calls <A href="frlrfsystemdatasqlclientsqlcommandclassexecutenonquerytopic.htm">ExecuteNonQuery</A>,
      and closes the connection. To accomplish this, the <B>ExecuteNonQuery</B> is
      passed a connection string and a query string that is a SQL INSERT
      statement.
      <code lang="vbnet">
        Public Sub InsertRow(myConnectionString As String)
        " If the connection string is null, use a default.
        If myConnectionString = "" Then
        myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass"
        End If
        Dim myConnection As New MySqlConnection(myConnectionString)
        Dim myInsertQuery As String = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)"
        Dim myCommand As New MySqlCommand(myInsertQuery)
        myCommand.Connection = myConnection
        myConnection.Open()
        myCommand.ExecuteNonQuery()
        myCommand.Connection.Close()
        End Sub
      </code>
      <code lang="C#">
        public void InsertRow(string myConnectionString)
        {
        // If the connection string is null, use a default.
        if(myConnectionString == "")
        {
        myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass";
        }
        MySqlConnection myConnection = new MySqlConnection(myConnectionString);
        string myInsertQuery = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)";
        MySqlCommand myCommand = new MySqlCommand(myInsertQuery);
        myCommand.Connection = myConnection;
        myConnection.Open();
        myCommand.ExecuteNonQuery();
        myCommand.Connection.Close();
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.#ctor">
            <overloads>
      <summary>
        Initializes a new instance of the MySqlCommand class.
      </summary>
      <example>
        The following example creates a MySqlCommand and sets some of its properties.
        <para></para>
        <note>
          This example shows how to use one of the overloaded
          versions of the MySqlCommand constructor. For other examples that might be available,
          see the individual overload topics.
        </note>

        <code lang="vbnet">
          Public Sub CreateMySqlCommand()
          Dim myConnection As New MySqlConnection _
          ("Persist Security Info=False;database=test;server=myServer")
          myConnection.Open()
          Dim myTrans As MySqlTransaction = myConnection.BeginTransaction()
          Dim mySelectQuery As String = "SELECT * FROM MyTable"
          Dim myCommand As New MySqlCommand(mySelectQuery, myConnection, myTrans)
          myCommand.CommandTimeout = 20
          End Sub
        </code>
        <code lang="C#">
          public void CreateMySqlCommand()
          {
          MySqlConnection myConnection = new MySqlConnection("Persist Security Info=False;
          database=test;server=myServer");
          myConnection.Open();
          MySqlTransaction myTrans = myConnection.BeginTransaction();
          string mySelectQuery = "SELECT * FROM myTable";
          MySqlCommand myCommand = new MySqlCommand(mySelectQuery, myConnection,myTrans);
          myCommand.CommandTimeout = 20;
          }
        </code>
        <code lang="C++">
          public:
          void CreateMySqlCommand()
          {
          MySqlConnection* myConnection = new MySqlConnection(S"Persist Security Info=False;
          database=test;server=myServer");
          myConnection-&gt;Open();
          MySqlTransaction* myTrans = myConnection-&gt;BeginTransaction();
          String* mySelectQuery = S"SELECT * FROM myTable";
          MySqlCommand* myCommand = new MySqlCommand(mySelectQuery, myConnection, myTrans);
          myCommand-&gt;CommandTimeout = 20;
          };
        </code>
      </example>
    </overloads><summary>
      Initializes a new instance of the MySqlCommand class.
    </summary><remarks>
      The base constructor initializes all fields to their default values. The
      following table shows initial property values for an instance of <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>.
      <list type="table">
        <listheader>
          <term>Properties</term>
          <term>Initial Value</term>
        </listheader>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/>
          </term>
          <term>empty string ("")</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/>
          </term>
          <term>0</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/>
          </term>
          <term>CommandType.Text</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/>
          </term>
          <term>Null</term>
        </item>
      </list>
      <para>
        You can change the value for any of these properties through a separate call to
        the property.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and
      sets some of its properties.

      <code lang="vbnet">
        Public Sub CreateMySqlCommand()
        Dim myCommand As New MySqlCommand()
        myCommand.CommandType = CommandType.Text
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlCommand()
        {
        MySqlCommand myCommand = new MySqlCommand();
        myCommand.CommandType = CommandType.Text;
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.#ctor(System.String)">
            <summary>
      Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> class with the text of the query.
    </summary><param name="cmdText">The text of the query.</param><remarks>
      When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> is created,
      the following read/write properties are set to initial values.

      <list type="table">
        <listheader>
          <term>Properties</term>
          <term>Initial Value</term>
        </listheader>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/>
          </term>
          <term>
            <i>cmdText</i>
          </term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/>
          </term>
          <term>0</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/>
          </term>
          <term>CommandType.Text</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/>
          </term>
          <term>Null</term>
        </item>
      </list>
      <para>
        You can change the value for any of these properties through a separate call to
        the property.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and
      sets some of its properties.

      <code lang="vbnet">
        Public Sub CreateMySqlCommand()
        Dim sql as String = "SELECT * FROM mytable"
        Dim myCommand As New MySqlCommand(sql)
        myCommand.CommandType = CommandType.Text
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlCommand()
        {
        string sql = "SELECT * FROM mytable";
        MySqlCommand myCommand = new MySqlCommand(sql);
        myCommand.CommandType = CommandType.Text;
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.#ctor(System.String,MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
      Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> class
      with the text of the query and a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>.
    </summary><param name="cmdText">The text of the query.</param><param name="connection">
      A <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> that represents the
      connection to an instance of SQL Server.
    </param><remarks>
      When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> is created,
      the following read/write properties are set to initial values.

      <list type="table">
        <listheader>
          <term>Properties</term>
          <term>Initial Value</term>
        </listheader>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/>
          </term>
          <term>
            <i>cmdText</i>
          </term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/>
          </term>
          <term>0</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/>
          </term>
          <term>CommandType.Text</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/>
          </term>
          <term>
            <i>connection</i>
          </term>
        </item>
      </list>
      <para>
        You can change the value for any of these properties through a separate call to
        the property.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and
      sets some of its properties.

      <code lang="vbnet">
        Public Sub CreateMySqlCommand()
        Dim conn as new MySqlConnection("server=myServer")
        Dim sql as String = "SELECT * FROM mytable"
        Dim myCommand As New MySqlCommand(sql, conn)
        myCommand.CommandType = CommandType.Text
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlCommand()
        {
        MySqlConnection conn = new MySqlConnection("server=myserver")
        string sql = "SELECT * FROM mytable";
        MySqlCommand myCommand = new MySqlCommand(sql, conn);
        myCommand.CommandType = CommandType.Text;
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.#ctor(System.String,MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction)">
            <summary>
      Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> class
      with the text of the query, a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, and the
      <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>.
    </summary><param name="cmdText">The text of the query.</param><param name="connection">
      A <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> that represents the
      connection to an instance of SQL Server.
    </param><param name="transaction">
      The <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/> in which the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> executes.
    </param><remarks>
      When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> is created,
      the following read/write properties are set to initial values.

      <list type="table">
        <listheader>
          <term>Properties</term>
          <term>Initial Value</term>
        </listheader>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/>
          </term>
          <term>
            <i>cmdText</i>
          </term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout"/>
          </term>
          <term>0</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/>
          </term>
          <term>CommandType.Text</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/>
          </term>
          <term>
            <i>connection</i>
          </term>
        </item>
      </list>
      <para>
        You can change the value for any of these properties through a separate call to
        the property.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and
      sets some of its properties.

      <code lang="vbnet">
        Public Sub CreateMySqlCommand()
        Dim conn as new MySqlConnection("server=myServer")
        conn.Open();
        Dim txn as MySqlTransaction = conn.BeginTransaction()
        Dim sql as String = "SELECT * FROM mytable"
        Dim myCommand As New MySqlCommand(sql, conn, txn)
        myCommand.CommandType = CommandType.Text
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlCommand()
        {
        MySqlConnection conn = new MySqlConnection("server=myserver")
        conn.Open();
        MySqlTransaction txn = conn.BeginTransaction();
        string sql = "SELECT * FROM mytable";
        MySqlCommand myCommand = new MySqlCommand(sql, conn, txn);
        myCommand.CommandType = CommandType.Text;
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.Cancel">
            <summary>
            Attempts to cancel the execution of a MySqlCommand.
            </summary>
            <remarks>
            Cancelling a currently active query only works with MySQL versions 5.0.0 and higher.
            </remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.CreateParameter">
            <summary>
            Creates a new instance of a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.
            </summary>
            <remarks>
            This method is a strongly-typed version of <see cref="M:System.Data.IDbCommand.CreateParameter"/>.
            </remarks>
            <returns>A <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
            
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.CheckState">
            <summary>
            Check the connection to make sure
            	- it is open
            	- it is not currently being used by a reader
            	- and we have the right version of MySQL for the requested command type
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery">
            <summary>
      Executes a SQL statement against the connection and returns the number of rows affected.
    </summary><returns>Number of rows affected</returns><remarks>
      You can use ExecuteNonQuery to perform any type of database operation,
      however any resultsets returned will not be available.  Any output parameters
      used in calling a stored procedure will be populated with data and can be
      retrieved after execution is complete.
      For UPDATE, INSERT, and DELETE statements, the return value is the number
      of rows affected by the command.  For all other types of statements, the return
      value is -1.
    </remarks><example>
      The following example creates a MySqlCommand and then
      executes it using ExecuteNonQuery. The example is passed a string that is a
      SQL statement (such as UPDATE, INSERT, or DELETE) and a string to use to
      connect to the data source.
      <code lang="vbnet">
        Public Sub CreateMySqlCommand(myExecuteQuery As String, myConnection As MySqlConnection)
        Dim myCommand As New MySqlCommand(myExecuteQuery, myConnection)
        myCommand.Connection.Open()
        myCommand.ExecuteNonQuery()
        myConnection.Close()
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlCommand(string myExecuteQuery, MySqlConnection myConnection)
        {
        MySqlCommand myCommand = new MySqlCommand(myExecuteQuery, myConnection);
        myCommand.Connection.Open();
        myCommand.ExecuteNonQuery();
        myConnection.Close();
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteReader">
            <summary>
      Sends the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlConnection">Connection</see>
      and builds a <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/>.
    </summary><returns>
      A <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object.
    </returns><remarks>
      <para>
        When the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/> property is set to <B>StoredProcedure</B>,
        the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> property should be set to the name of the stored
        procedure. The command executes this stored procedure when you call
        <B>ExecuteReader</B>.
      </para>
      <para>
        While the <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> is in use, the associated
        <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is busy serving the <B>MySqlDataReader</B>.
        While in this state, no other operations can be performed on the
        <B>MySqlConnection</B> other than closing it. This is the case until the
        <see cref="M:MySql.Data.MySqlClient.MySqlDataReader.Close"/> method of the <B>MySqlDataReader</B> is called.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, then executes it by
      passing a string that is a SQL SELECT statement, and a string to use to connect to the
      data source.
      <code lang="vbnet">
        Public Sub CreateMySqlDataReader(mySelectQuery As String, myConnection As MySqlConnection)
        Dim myCommand As New MySqlCommand(mySelectQuery, myConnection)
        myConnection.Open()
        Dim myReader As MySqlDataReader
        myReader = myCommand.ExecuteReader()
        Try
        While myReader.Read()
        Console.WriteLine(myReader.GetString(0))
        End While
        Finally
        myReader.Close
        myConnection.Close
        End Try
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlDataReader(string mySelectQuery, MySqlConnection myConnection)
        {
        MySqlCommand myCommand = new MySqlCommand(mySelectQuery, myConnection);
        myConnection.Open();
        MMySqlDataReader myReader;
        myReader = myCommand.ExecuteReader();
        try
        {
        while(myReader.Read())
        {
        Console.WriteLine(myReader.GetString(0));
        }
        }
        finally
        {
        myReader.Close();
        myConnection.Close();
        }
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteReader(System.Data.CommandBehavior)">
            <summary>
      Sends the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlConnection">Connection</see>,
      and builds a <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> using one of the <see cref="T:System.Data.CommandBehavior"/> values.
    </summary><param name="behavior">
      One of the <see cref="T:System.Data.CommandBehavior"/> values.
    </param><remarks>
      <para>
        When the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/> property is set to <B>StoredProcedure</B>,
        the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> property should be set to the name of the stored
        procedure. The command executes this stored procedure when you call
        <B>ExecuteReader</B>.
      </para>
      <para>
        The <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> supports a special mode that enables large binary
        values to be read efficiently. For more information, see the <B>SequentialAccess</B>
        setting for <see cref="T:System.Data.CommandBehavior"/>.
      </para>
      <para>
        While the <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> is in use, the associated
        <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is busy serving the <B>MySqlDataReader</B>.
        While in this state, no other operations can be performed on the
        <B>MySqlConnection</B> other than closing it. This is the case until the
        <see cref="M:MySql.Data.MySqlClient.MySqlDataReader.Close"/> method of the <B>MySqlDataReader</B> is called.
        If the <B>MySqlDataReader</B> is created with <B>CommandBehavior</B> set to
        <B>CloseConnection</B>, closing the <B>MySqlDataReader</B> closes the connection
        automatically.
      </para>
      <note>
        When calling ExecuteReader with the SingleRow behavior, you should be aware that using a <i>limit</i>
        clause in your SQL will cause all rows (up to the limit given) to be retrieved by the client.  The
        <see cref="M:MySql.Data.MySqlClient.MySqlDataReader.Read"/> method will still return false after the first row but pulling all rows of data
        into the client will have a performance impact.  If the <i>limit</i> clause is not necessary, it should
        be avoided.
      </note>
    </remarks><returns>
      A <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object.
    </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteScalar">
            <summary>
      Executes the query, and returns the first column of the first row in the
      result set returned by the query. Extra columns or rows are ignored.
    </summary><returns>
      The first column of the first row in the result set, or a null reference if the
      result set is empty
    </returns><remarks>
      <para>
        Use the <B>ExecuteScalar</B> method to retrieve a single value (for example,
        an aggregate value) from a database. This requires less code than using the
        <see cref="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteReader"/> method, and then performing the operations necessary
        to generate the single value using the data returned by a <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/>
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and then
      executes it using <B>ExecuteScalar</B>. The example is passed a string that is a
      SQL statement that returns an aggregate result, and a string to use to
      connect to the data source.

      <code lang="vbnet">
        Public Sub CreateMySqlCommand(myScalarQuery As String, myConnection As MySqlConnection)
        Dim myCommand As New MySqlCommand(myScalarQuery, myConnection)
        myCommand.Connection.Open()
        myCommand.ExecuteScalar()
        myConnection.Close()
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlCommand(string myScalarQuery, MySqlConnection myConnection)
        {
        MySqlCommand myCommand = new MySqlCommand(myScalarQuery, myConnection);
        myCommand.Connection.Open();
        myCommand.ExecuteScalar();
        myConnection.Close();
        }
      </code>
      <code lang="C++">
        public:
        void CreateMySqlCommand(String* myScalarQuery, MySqlConnection* myConnection)
        {
        MySqlCommand* myCommand = new MySqlCommand(myScalarQuery, myConnection);
        myCommand-&gt;Connection-&gt;Open();
        myCommand-&gt;ExecuteScalar();
        myConnection-&gt;Close();
        }
      </code>

    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.Prepare(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="docs/mysqlcommand.xml" path="docs/Prepare2/*"/>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.Prepare">
            <summary>
      Creates a prepared version of the command on an instance of MySQL Server.
    </summary><remarks>
      <para>
        Prepared statements are only supported on MySQL version 4.1 and higher.  Calling
        prepare while connected to earlier versions of MySQL will succeed but will execute
        the statement in the same way as unprepared.
      </para>
    </remarks><example>
      The following example demonstrates the use of the <b>Prepare</b> method.
      <code lang="VB.NET">
        public sub PrepareExample()
        Dim cmd as New MySqlCommand("INSERT INTO mytable VALUES (@val)", myConnection)
        cmd.Parameters.Add( "@val", 10 )
        cmd.Prepare()
        cmd.ExecuteNonQuery()

        cmd.Parameters(0).Value = 20
        cmd.ExecuteNonQuery()
        end sub
      </code>
      <code lang="C#">
        private void PrepareExample()
        {
        MySqlCommand cmd = new MySqlCommand("INSERT INTO mytable VALUES (@val)", myConnection);
        cmd.Parameters.Add( "@val", 10 );
        cmd.Prepare();
        cmd.ExecuteNonQuery();

        cmd.Parameters[0].Value = 20;
        cmd.ExecuteNonQuery();
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.BeginExecuteReader">
            <summary>
            Initiates the asynchronous execution of the SQL statement or stored procedure 
            that is described by this <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, and retrieves one or more 
            result sets from the server. 
            </summary>
            <returns>An <see cref="T:System.IAsyncResult"/> that can be used to poll, wait for results, 
            or both; this value is also needed when invoking EndExecuteReader, 
            which returns a <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> instance that can be used to retrieve 
            the returned rows. </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.BeginExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Initiates the asynchronous execution of the SQL statement or stored procedure 
            that is described by this <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> using one of the 
            <b>CommandBehavior</b> values. 
            </summary>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"/> values, indicating 
            options for statement execution and data retrieval.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that can be used to poll, wait for results, 
            or both; this value is also needed when invoking EndExecuteReader, 
            which returns a <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> instance that can be used to retrieve 
            the returned rows. </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.EndExecuteReader(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a SQL statement, returning the requested 
            <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/>.
            </summary>
            <param name="result">The <see cref="T:System.IAsyncResult"/> returned by the call to 
            <see cref="M:MySql.Data.MySqlClient.MySqlCommand.BeginExecuteReader"/>.</param>
            <returns>A <b>MySqlDataReader</b> object that can be used to retrieve the requested rows. </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.BeginExecuteNonQuery(System.AsyncCallback,System.Object)">
            <summary>
            Initiates the asynchronous execution of the SQL statement or stored procedure 
            that is described by this <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>. 
            </summary>
            <param name="callback">
            An <see cref="T:System.AsyncCallback"/> delegate that is invoked when the command's 
            execution has completed. Pass a null reference (<b>Nothing</b> in Visual Basic) 
            to indicate that no callback is required.</param>
            <param name="stateObject">A user-defined state object that is passed to the 
            callback procedure. Retrieve this object from within the callback procedure 
            using the <see cref="P:System.IAsyncResult.AsyncState"/> property.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, 
            or both; this value is also needed when invoking <see cref="M:MySql.Data.MySqlClient.MySqlCommand.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected rows. </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.BeginExecuteNonQuery">
            <summary>
            Initiates the asynchronous execution of the SQL statement or stored procedure 
            that is described by this <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>. 
            </summary>
            <returns>An <see cref="T:System.IAsyncResult"/> that can be used to poll or wait for results, 
            or both; this value is also needed when invoking <see cref="M:MySql.Data.MySqlClient.MySqlCommand.EndExecuteNonQuery(System.IAsyncResult)"/>, 
            which returns the number of affected rows. </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.EndExecuteNonQuery(System.IAsyncResult)">
            <summary>
            Finishes asynchronous execution of a SQL statement. 
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> returned by the call 
            to <see cref="M:MySql.Data.MySqlClient.MySqlCommand.BeginExecuteNonQuery"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommand.System#ICloneable#Clone">
            <summary>
            Creates a clone of this MySqlCommand object.  CommandText, Connection, and Transaction properties
            are included as well as the entire parameter list.
            </summary>
            <returns>The cloned MySqlCommand object</returns>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.LastInsertedId">
            <!-- No matching elements were found for the following include tag --><include file="docs/mysqlcommand.xml" path="docs/LastInseredId/*"/>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.CommandText">
            <summary>
      Gets or sets the SQL statement to execute at the data source.
    </summary><value>
      The SQL statement or stored procedure to execute. The default is an empty string.
    </value><remarks>
      <para>
        When the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandType"/> property is set to <B>StoredProcedure</B>,
        the <B>CommandText</B> property should be set to the name of the stored procedure.
        The user may be required to use escape character syntax if the stored procedure name
        contains any special characters. The command executes this stored procedure when
        you call one of the Execute methods.  Starting with Connector/Net 5.0, having both a stored function
        and stored procedure with the same name in the same database is not supported.  It is
        suggested that you provide unqiue names for your stored routines.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and sets some of its properties.
      <code lang="vbnet">
        Public Sub CreateMySqlCommand()
        Dim myCommand As New MySqlCommand()
        myCommand.CommandText = "SELECT * FROM Mytable ORDER BY id"
        myCommand.CommandType = CommandType.Text
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlCommand()
        {
        MySqlCommand myCommand = new MySqlCommand();
        myCommand.CommandText = "SELECT * FROM mytable ORDER BY id";
        myCommand.CommandType = CommandType.Text;
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout">
            <summary>
      Gets or sets the wait time before terminating the attempt to execute a command
      and generating an error.
    </summary><value>
      The time (in seconds) to wait for the command to execute. The default is 30
      seconds.
    </value><remarks>
      CommandTimeout is dependent on the ability of MySQL to cancel an executing query.
      Because of this, CommandTimeout is only supported when connected to MySQL
      version 5.0.0 or higher.
    </remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.CommandType">
            <summary>
      Gets or sets a value indicating how the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> property is to be interpreted.
    </summary><value>
      One of the <see cref="T:System.Data.CommandType"/> values. The default is <B>Text</B>.
    </value><remarks>
      <para>
        When you set the <B>CommandType</B> property to <B>StoredProcedure</B>, you
        should set the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandText"/> property to the name of the stored
        procedure. The command executes this stored procedure when you call one of the
        Execute methods.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and sets some of its properties.
      <code lang="vbnet">
        Public Sub CreateMySqlCommand()
        Dim myCommand As New MySqlCommand()
        myCommand.CommandType = CommandType.Text
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlCommand()
        {
        MySqlCommand myCommand = new MySqlCommand();
        myCommand.CommandType = CommandType.Text;
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.IsPrepared">
            <!-- No matching elements were found for the following include tag --><include file="docs/mysqlcommand.xml" path="docs/IsPrepared/*"/>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.Connection">
            <summary>
      Gets or sets the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> used by this instance of the
      <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>.
    </summary><value>
      The connection to a data source. The default value is a null reference
      (<B>Nothing</B> in Visual Basic).
    </value><remarks>
      <para>
        If you set <B>Connection</B> while a transaction is in progress and the
        <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Transaction"/> property is not null, an <see cref="T:System.InvalidOperationException"/>
        is generated. If the <B>Transaction</B> property is not null and the transaction
        has already been committed or rolled back, <B>Transaction</B> is set to
        null.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and sets some of its properties.
      <code lang="vbnet">
        Public Sub CreateMySqlCommand()
        Dim mySelectQuery As String = "SELECT * FROM mytable ORDER BY id"
        Dim myConnectString As String = "Persist Security Info=False;database=test;server=myServer"
        Dim myCommand As New MySqlCommand(mySelectQuery)
        myCommand.Connection = New MySqlConnection(myConnectString)
        myCommand.CommandType = CommandType.Text
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlCommand()
        {
        string mySelectQuery = "SELECT * FROM mytable ORDER BY id";
        string myConnectString = "Persist Security Info=False;database=test;server=myServer";
        MySqlCommand myCommand = new MySqlCommand(mySelectQuery);
        myCommand.Connection = new MySqlConnection(myConnectString);
        myCommand.CommandType = CommandType.Text;
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.Parameters">
            <summary>
      Get the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>
    </summary><value>
      The parameters of the SQL statement or stored procedure. The default is
      an empty collection.
    </value><remarks>
      Connector/Net does not support unnamed parameters.  Every parameter added to the collection must
      have an associated name.
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and displays its parameters.
      To accomplish this, the method is passed a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, a query string
      that is a SQL SELECT statement, and an array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects.
      <code lang="vbnet">
        Public Sub CreateMySqlCommand(myConnection As MySqlConnection, _
        mySelectQuery As String, myParamArray() As MySqlParameter)
        Dim myCommand As New MySqlCommand(mySelectQuery, myConnection)
        myCommand.CommandText = "SELECT id, name FROM mytable WHERE age=@age"
        myCommand.UpdatedRowSource = UpdateRowSource.Both
        myCommand.Parameters.Add(myParamArray)
        Dim j As Integer
        For j = 0 To myCommand.Parameters.Count - 1
        myCommand.Parameters.Add(myParamArray(j))
        Next j
        Dim myMessage As String = ""
        Dim i As Integer
        For i = 0 To myCommand.Parameters.Count - 1
        myMessage += myCommand.Parameters(i).ToString() &amp; ControlChars.Cr
        Next i
        Console.WriteLine(myMessage)
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlCommand(MySqlConnection myConnection, string mySelectQuery,
        MySqlParameter[] myParamArray)
        {
        MySqlCommand myCommand = new MySqlCommand(mySelectQuery, myConnection);
        myCommand.CommandText = "SELECT id, name FROM mytable WHERE age=@age";
        myCommand.Parameters.Add(myParamArray);
        for (int j=0; j&lt;myParamArray.Length; j++)
        {
        myCommand.Parameters.Add(myParamArray[j]) ;
        }
        string myMessage = "";
        for (int i = 0; i &lt; myCommand.Parameters.Count; i++)
        {
        myMessage += myCommand.Parameters[i].ToString() + "\n";
        }
        MessageBox.Show(myMessage);
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.Transaction">
            <summary>
      Gets or sets the <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/> within which the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> executes.
    </summary><value>
      The <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>.  The default value is a null reference (<B>Nothing</B> in Visual Basic).
    </value><remarks>
      You cannot set the <B>Transaction</B> property if it is already set to a
      specific value, and the command is in the process of executing. If you set the
      transaction property to a <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/> object that is not connected
      to the same <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> as the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object,
      an exception will be thrown the next time you attempt to execute a statement.
    </remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.DesignTimeVisible">
            <summary>
            Gets or sets a value indicating whether the command object should be visible in a Windows Form Designer control. 
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommand.UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the DataRow when used by the 
            Update method of the DbDataAdapter. 
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.ClientFlags">
            <summary>
            Summary description for ClientParam.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.DBCmd">
            <summary>
            DB Operations Code
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlDbType">
            <summary>
            Specifies MySQL specific data type of a field, property, for use in a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/>.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Decimal">
            <summary>
            <see cref="F:MySql.Data.MySqlClient.MySqlDbType.Decimal"/>
            <para>A fixed precision and scale numeric value between -1038 
            -1 and 10 38 -1.</para>
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Byte">
            <summary>
            <see cref="F:MySql.Data.MySqlClient.MySqlDbType.Byte"/><para>The signed range is -128 to 127. The unsigned 
            range is 0 to 255.</para>
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Int16">
            <summary>
            <see cref="F:MySql.Data.MySqlClient.MySqlDbType.Int16"/><para>A 16-bit signed integer. The signed range is 
            -32768 to 32767. The unsigned range is 0 to 65535</para>
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Int24">
            <summary>
            Specifies a 24 (3 byte) signed or unsigned value.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Int32">
            <summary>
            <see cref="F:MySql.Data.MySqlClient.MySqlDbType.Int32"/><para>A 32-bit signed integer</para>
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Int64">
            <summary>
            <see cref="F:MySql.Data.MySqlClient.MySqlDbType.Int64"/><para>A 64-bit signed integer.</para>
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Float">
            <summary>
            <see cref="T:System.Single"/><para>A small (single-precision) floating-point 
            number. Allowable values are -3.402823466E+38 to -1.175494351E-38, 
            0, and 1.175494351E-38 to 3.402823466E+38.</para>
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Double">
            <summary>
            <see cref="F:MySql.Data.MySqlClient.MySqlDbType.Double"/><para>A normal-size (double-precision) 
            floating-point number. Allowable values are -1.7976931348623157E+308 
            to -2.2250738585072014E-308, 0, and 2.2250738585072014E-308 to 
            1.7976931348623157E+308.</para>
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Timestamp">
            <summary>
            A timestamp. The range is '1970-01-01 00:00:00' to sometime in the 
            year 2037
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Date">
            <summary>
            Date The supported range is '1000-01-01' to '9999-12-31'.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Time">
            <summary>
            Time <para>The range is '-838:59:59' to '838:59:59'.</para>
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.DateTime">
            <summary>
            DateTime The supported range is '1000-01-01 00:00:00' to 
            '9999-12-31 23:59:59'.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Datetime">
            <summary>
            Datetime The supported range is '1000-01-01 00:00:00' to 
            '9999-12-31 23:59:59'.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Year">
            <summary>
            A year in 2- or 4-digit format (default is 4-digit). The 
            allowable values are 1901 to 2155, 0000 in the 4-digit year 
            format, and 1970-2069 if you use the 2-digit format (70-69).
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Newdate">
            <summary>
            <b>Obsolete</b>  Use Datetime or Date type
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.VarString">
            <summary>
            A variable-length string containing 0 to 65535 characters
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Bit">
            <summary>
            Bit-field data type
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.NewDecimal">
            <summary>
            New Decimal
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Enum">
            <summary>
            An enumeration. A string object that can have only one value, 
            chosen from the list of values 'value1', 'value2', ..., NULL 
            or the special "" error value. An ENUM can have a maximum of 
            65535 distinct values
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Set">
            <summary>
            A set. A string object that can have zero or more values, each 
            of which must be chosen from the list of values 'value1', 'value2', 
            ... A SET can have a maximum of 64 members.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.TinyBlob">
            <summary>
            A binary column with a maximum length of 255 (2^8 - 1) 
            characters
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.MediumBlob">
            <summary>
            A binary column with a maximum length of 16777215 (2^24 - 1) bytes.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.LongBlob">
            <summary>
            A binary column with a maximum length of 4294967295 or 
            4G (2^32 - 1) bytes.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Blob">
            <summary>
            A binary column with a maximum length of 65535 (2^16 - 1) bytes.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.VarChar">
            <summary>
            A variable-length string containing 0 to 255 bytes.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.String">
            <summary>
            A fixed-length string.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Geometry">
            <summary>
            Geometric (GIS) data type.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.UByte">
            <summary>
            Unsigned 8-bit value.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.UInt16">
            <summary>
            Unsigned 16-bit value.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.UInt24">
            <summary>
            Unsigned 24-bit value.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.UInt32">
            <summary>
            Unsigned 32-bit value.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.UInt64">
            <summary>
            Unsigned 64-bit value.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Binary">
            <summary>
            Fixed length binary string.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.VarBinary">
            <summary>
            Variable length binary string.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.TinyText">
            <summary>
            A text column with a maximum length of 255 (2^8 - 1) characters.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.MediumText">
            <summary>
            A text column with a maximum length of 16777215 (2^24 - 1) characters.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.LongText">
            <summary>
            A text column with a maximum length of 4294967295 or 
            4G (2^32 - 1) characters.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDbType.Text">
            <summary>
            A text column with a maximum length of 65535 (2^16 - 1) characters.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlConnectionProtocol">
            <summary>
            Allows the user to specify the type of connection that should
            be used.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlConnectionProtocol.Sockets">
            <summary>
            TCP/IP style connection.  Works everywhere.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlConnectionProtocol.NamedPipe">
            <summary>
            Named pipe connection.  Works only on Windows systems.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlConnectionProtocol.UnixSocket">
            <summary>
            Unix domain socket connection.  Works only with Unix systems.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlConnectionProtocol.SharedMemory">
            <summary>
            Shared memory connection.  Currently works only with Windows systems.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlDriverType">
            <summary>
            Specifies the connection types supported
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDriverType.Native">
            <summary>
            Use TCP/IP sockets.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDriverType.Client">
            <summary>
            Use client library.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlDriverType.Embedded">
            <summary>
            Use MySQL embedded server.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlDataReader">
            <summary>
      Provides a means of reading a forward-only stream of rows from a MySQL database. This class cannot be inherited.
    </summary><remarks>
      <para>
        To create a <B>MySQLDataReader</B>, you must call the <see cref="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteReader"/>
        method of the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object, rather than directly using a constructor.
      </para>
      <para>
        While the <B>MySqlDataReader</B> is in use, the associated <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>
        is busy serving the <B>MySqlDataReader</B>, and no other operations can be performed
        on the <B>MySqlConnection</B> other than closing it. This is the case until the
        <see cref="M:MySql.Data.MySqlClient.MySqlDataReader.Close"/> method of the <B>MySqlDataReader</B> is called.
      </para>
      <para>
        <see cref="P:MySql.Data.MySqlClient.MySqlDataReader.IsClosed"/> and <see cref="P:MySql.Data.MySqlClient.MySqlDataReader.RecordsAffected"/>
        are the only properties that you can call after the <B>MySqlDataReader</B> is
        closed. Though the <B>RecordsAffected</B> property may be accessed at any time
        while the <B>MySqlDataReader</B> exists, always call <B>Close</B> before returning
        the value of <B>RecordsAffected</B> to ensure an accurate return value.
      </para>
      <para>
        For optimal performance, <B>MySqlDataReader</B> avoids creating
        unnecessary objects or making unnecessary copies of data. As a result, multiple calls
        to methods such as <see cref="M:MySql.Data.MySqlClient.MySqlDataReader.GetValue(System.Int32)"/> return a reference to the
        same object. Use caution if you are modifying the underlying value of the objects
        returned by methods such as <B>GetValue</B>.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>,
      a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, and a <B>MySqlDataReader</B>. The example reads through
      the data, writing it out to the console. Finally, the example closes the <B>MySqlDataReader</B>, then the
      <B>MySqlConnection</B>.
      <code lang="vbnet">
        Public Sub ReadMyData(myConnString As String)
        Dim mySelectQuery As String = "SELECT OrderID, CustomerID FROM Orders"
        Dim myConnection As New MySqlConnection(myConnString)
        Dim myCommand As New MySqlCommand(mySelectQuery, myConnection)
        myConnection.Open()
        Dim myReader As MySqlDataReader
        myReader = myCommand.ExecuteReader()
        ' Always call Read before accessing data.
        While myReader.Read()
        Console.WriteLine((myReader.GetInt32(0) &amp; ", " &amp; myReader.GetString(1)))
        End While
        ' always call Close when done reading.
        myReader.Close()
        ' Close the connection when done with it.
        myConnection.Close()
        End Sub 'ReadMyData
      </code>
      <code lang="C#">
        public void ReadMyData(string myConnString) {
        string mySelectQuery = "SELECT OrderID, CustomerID FROM Orders";
        MySqlConnection myConnection = new MySqlConnection(myConnString);
        MySqlCommand myCommand = new MySqlCommand(mySelectQuery,myConnection);
        myConnection.Open();
        MySqlDataReader myReader;
        myReader = myCommand.ExecuteReader();
        // Always call Read before accessing data.
        while (myReader.Read()) {
        Console.WriteLine(myReader.GetInt32(0) + ", " + myReader.GetString(1));
        }
        // always call Close when done reading.
        myReader.Close();
        // Close the connection when done with it.
        myConnection.Close();
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.Close">
            <summary>
            Closes the MySqlDataReader object.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetBoolean(System.String)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetByte(System.String)">
            <summary>
            Gets the value of the specified column as a byte.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetByte(System.Int32)">
            <summary>
            Gets the value of the specified column as a byte.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer an array starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal. </param>
            <param name="fieldOffset">The index within the field from which to begin the read operation. </param>
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="bufferoffset">The index for buffer to begin the read operation. </param>
            <param name="length">The maximum length to copy into the buffer. </param>
            <returns>The actual number of bytes read.</returns>
            <!-- No matching elements were found for the following include tag --><include file="docs/MySqlDataReader.xml" path="MyDocs/MyMembers[@name=&quot;GetBytes&quot;]/*"/>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetChar(System.String)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetChar(System.Int32)">
            <summary>
            Gets the value of the specified column as a single character.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array starting at the given buffer offset.
            </summary>
            <param name="i"></param>
            <param name="fieldoffset"></param>
            <param name="buffer"></param>
            <param name="bufferoffset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the source data type.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetMySqlDateTime(System.String)">
            <summary>
      Gets the value of the specified column as a <see cref="T:MySql.Data.Types.MySqlDateTime"/> object.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>DateTime</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The zero-based column ordinal or column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetMySqlDateTime(System.Int32)">
            <summary>
      Gets the value of the specified column as a <see cref="T:MySql.Data.Types.MySqlDateTime"/> object.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>DateTime</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The zero-based column ordinal or column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDateTime(System.String)">
            <summary>
      Gets the value of the specified column as a <see cref="T:System.DateTime"/> object.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>DateTime</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
      <note>
        <para>
          MySql allows date columns to contain the value '0000-00-00' and datetime
          columns to contain the value '0000-00-00 00:00:00'.  The DateTime structure cannot contain
          or represent these values.  To read a datetime value from a column that might
          contain zero values, use <see cref="M:MySql.Data.MySqlClient.MySqlDataReader.GetMySqlDateTime(System.Int32)"/>.
        </para>
        <para>
          The behavior of reading a zero datetime column using this method is defined by the
          <i>ZeroDateTimeBehavior</i> connection string option.  For more information on this option,
          please refer to <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/>.
        </para>
      </note>
    </remarks><param name="column">The column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDateTime(System.Int32)">
            <summary>
      Gets the value of the specified column as a <see cref="T:System.DateTime"/> object.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>DateTime</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
      <note>
        <para>
          MySql allows date columns to contain the value '0000-00-00' and datetime
          columns to contain the value '0000-00-00 00:00:00'.  The DateTime structure cannot contain
          or represent these values.  To read a datetime value from a column that might
          contain zero values, use <see cref="M:MySql.Data.MySqlClient.MySqlDataReader.GetMySqlDateTime(System.Int32)"/>.
        </para>
        <para>
          The behavior of reading a zero datetime column using this method is defined by the
          <i>ZeroDateTimeBehavior</i> connection string option.  For more information on this option,
          please refer to <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/>.
        </para>
      </note>
    </remarks><param name="i">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDecimal(System.String)">
            <summary>
      Gets the value of the specified column as a <see cref="T:System.Decimal"/> object.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Decimal</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The column name</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDecimal(System.Int32)">
            <summary>
      Gets the value of the specified column as a <see cref="T:System.Decimal"/> object.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Decimal</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="i">The zero-based column ordinal</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDouble(System.String)">
            <summary>Gets the value of the specified column as a double-precision floating point number.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Double</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The column name</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetDouble(System.Int32)">
            <summary>Gets the value of the specified column as a double-precision floating point number.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Double</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="i">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type that is the data type of the object.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetFloat(System.String)">
            <summary>
      Gets the value of the specified column as a single-precision floating point number.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Float</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The column name</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetFloat(System.Int32)">
            <summary>
      Gets the value of the specified column as a single-precision floating point number.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Float</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="i">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetGuid(System.String)">
            <!-- No matching elements were found for the following include tag --><include file="docs/MySqlDataReader.xml" path="docs/GetGuidS/*"/>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetGuid(System.Int32)">
            <!-- No matching elements were found for the following include tag --><include file="docs/MySqlDataReader.xml" path="docs/GetGuid/*"/>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetInt16(System.String)">
            <summary>Gets the value of the specified column as a 16-bit signed integer.</summary><remarks>
      <para>
        No conversions are performed; threfore, the data retrieved must already be a <b>16 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The column name</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetInt16(System.Int32)">
            <summary>Gets the value of the specified column as a 16-bit signed integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>16 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="i">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetInt32(System.String)">
            <summary>Gets the value of the specified column as a 32-bit signed integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>32 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetInt32(System.Int32)">
            <summary>Gets the value of the specified column as a 32-bit signed integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>32 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="i">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetInt64(System.String)">
            <summary>Gets the value of the specified column as a 64-bit signed integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>64 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetInt64(System.Int32)">
            <summary>Gets the value of the specified column as a 64-bit signed integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>64 bit integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="i">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the specified column.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the column ordinal, given the name of the column.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the MySqlDataReader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetString(System.String)">
            <summary>
      Gets the value of the specified column as a <see cref="T:System.String"/> object.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>String</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetString(System.Int32)">
            <summary>
      Gets the value of the specified column as a <see cref="T:System.String"/> object.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>String</b> object.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="i">The zero-based column ordinal.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetTimeSpan(System.String)">
            <overloads/><summary>
      Gets the value of the specified column as a <see cref="T:System.TimeSpan"/> object.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Time</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The zero-based column ordinal or column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetTimeSpan(System.Int32)">
            <overloads/><summary>
      Gets the value of the specified column as a <see cref="T:System.TimeSpan"/> object.
    </summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>Time</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The zero-based column ordinal or column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value of the specified column in its native format.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetValues(System.Object[])">
            <summary>
            Gets all attribute columns in the collection for the current row.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetUInt16(System.String)">
            <summary>Gets the value of the specified column as a 16-bit unsigned integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>16 bit unsigned integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The zero-based column ordinal or column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetUInt16(System.Int32)">
            <summary>Gets the value of the specified column as a 16-bit unsigned integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>16 bit unsigned integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The zero-based column ordinal or column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetUInt32(System.String)">
            <summary>Gets the value of the specified column as a 32-bit unsigned integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>32 bit unsigned integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The zero-based column ordinal or column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetUInt32(System.Int32)">
            <summary>Gets the value of the specified column as a 32-bit unsigned integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>32 bit unsigned integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The zero-based column ordinal or column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetUInt64(System.String)">
            <summary>Gets the value of the specified column as a 64-bit unsigned integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>64 bit unsigned integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The zero-based column ordinal or column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetUInt64(System.Int32)">
            <summary>Gets the value of the specified column as a 64-bit unsigned integer.</summary><remarks>
      <para>
        No conversions are performed; therefore, the data retrieved must already be a <b>64 bit unsigned integer</b> value.
      </para>
      <para>
        Call IsDBNull to check for null values before calling this method.
      </para>
    </remarks><param name="column">The zero-based column ordinal or column name.</param><returns>The value of the specified column.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.IsDBNull(System.Int32)">
            <summary>
            Gets a value indicating whether the column contains non-existent or missing values.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetResultSet">
            <summary>
            GetResultSet is the core resultset processing method.  It gets called by NextResult
            and will loop until it finds a select resultset at which point it will return the 
            number of columns in that result.  It will _not_ return for non-select resultsets instead
            just updating the internal lastInsertId and affectedRows variables.  
            </summary>
            <returns>-1 if no more results exist, >= 0 for select results</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.Read">
            <summary>
            Advances the MySqlDataReader to the next record.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/> that iterates through the <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/>. 
            </summary>
            <returns></returns>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.  This method is not 
            supported currently and always returns 0.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.HasRows">
            <summary>
            Gets a value indicating whether the MySqlDataReader contains one or more rows.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.Item(System.Int32)">
            <summary>
            Overloaded. Gets the value of a column in its native format.
            In C#, this property is the indexer for the MySqlDataReader class.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataReader.Item(System.String)">
            <summary>
            Gets the value of a column in its native format.
            [C#] In C#, this property is the indexer for the MySqlDataReader class.
            </summary>
        </member>
        <member name="M:MySql.Data.Common.Platform.#ctor">
            <summary>
            By creating a private ctor, we keep the compiler from creating a default ctor
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.AdapterIsNull">
            <summary>
              Looks up a localized string similar to Improper MySqlCommandBuilder state: adapter is null.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.AdapterSelectIsNull">
            <summary>
              Looks up a localized string similar to Improper MySqlCommandBuilder state: adapter&apos;s SelectCommand is null.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.BadVersionFormat">
            <summary>
              Looks up a localized string similar to Version string not in acceptable format.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.BufferCannotBeNull">
            <summary>
              Looks up a localized string similar to  The buffer cannot be null.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.BufferNotLargeEnough">
            <summary>
              Looks up a localized string similar to  Buffer is not large enough.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.CancelNeeds50">
            <summary>
              Looks up a localized string similar to Canceling an executing query requires MySQL 5.0 or higher..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.CancelNotSupported">
            <summary>
              Looks up a localized string similar to Canceling an active query is only supported on MySQL 5.0.0 and above. .
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.CBMultiTableNotSupported">
            <summary>
              Looks up a localized string similar to MySqlCommandBuilder does not support multi-table statements.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.CBNoKeyColumn">
            <summary>
              Looks up a localized string similar to MySqlCommandBuilder cannot operate on tables with no unique or key columns.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ChaosNotSupported">
            <summary>
              Looks up a localized string similar to Chaos isolation level is not supported.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.CommandTextNotInitialized">
            <summary>
              Looks up a localized string similar to The CommandText property has not been properly initialized..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ConnectionAlreadyOpen">
            <summary>
              Looks up a localized string similar to The connection is already open..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ConnectionBroken">
            <summary>
              Looks up a localized string similar to Connection unexpectedly terminated..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ConnectionMustBeOpen">
            <summary>
              Looks up a localized string similar to Connection must be valid and open.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ConnectionNotOpen">
            <summary>
              Looks up a localized string similar to The connection is not open..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ConnectionNotSet">
            <summary>
              Looks up a localized string similar to The connection property has not been set or is null..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.CountCannotBeNegative">
            <summary>
              Looks up a localized string similar to  Count cannot be negative.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.CSNoSetLength">
            <summary>
              Looks up a localized string similar to SetLength is not a valid operation on CompressedStream.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.DataReaderOpen">
            <summary>
              Looks up a localized string similar to There is already an open DataReader associated with this Connection which must be closed first..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.DistributedTxnNotSupported">
            <summary>
              Looks up a localized string similar to MySQL Connector/Net does not currently support distributed transactions..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ErrorCreatingSocket">
            <summary>
              Looks up a localized string similar to Error creating socket connection.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.FatalErrorDuringExecute">
            <summary>
              Looks up a localized string similar to Fatal error encountered during command execution..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.FatalErrorDuringRead">
            <summary>
              Looks up a localized string similar to Fatal error encountered during data read..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.FatalErrorReadingResult">
            <summary>
              Looks up a localized string similar to Fatal error encountered attempting to read the resultset..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.FromAndLengthTooBig">
            <summary>
              Looks up a localized string similar to From index and length use more bytes than from contains.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.FromIndexMustBeValid">
            <summary>
              Looks up a localized string similar to From index must be a valid index inside the from buffer.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.HardProcQuery">
            <summary>
              Looks up a localized string similar to Retrieving procedure metadata for {0} from server..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ImproperValueFormat">
            <summary>
              Looks up a localized string similar to Value has an unsupported format..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.IncorrectTransmission">
            <summary>
              Looks up a localized string similar to An incorrect response was received from the server..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.IndexAndLengthTooBig">
            <summary>
              Looks up a localized string similar to Index and length use more bytes than to has room for.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.IndexMustBeValid">
            <summary>
              Looks up a localized string similar to Index must be a valid position in the buffer.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.InvalidProcName">
            <summary>
              Looks up a localized string similar to Procedure or function &apos;{0}&apos; cannot be found in database &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.KeywordNoNull">
            <summary>
              Looks up a localized string similar to Keyword does not allow null values..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.KeywordNotSupported">
            <summary>
              Looks up a localized string similar to Keyword not supported..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.MixingUpdatedRowSource">
            <summary>
              Looks up a localized string similar to When MySqlCommandBuilder.ReturnGeneratedIdentifiers is true, MySqlCommand.UpdatedRowSource must be set to None..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.MultipleConnectionsInTransactionNotSupported">
            <summary>
              Looks up a localized string similar to Multiple simultaneous connections or connections with different connection strings inside the same transaction are not currently supported..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.NamedPipeNoSeek">
            <summary>
              Looks up a localized string similar to NamedPipeStream does not support seeking.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.NamedPipeNoSetLength">
            <summary>
              Looks up a localized string similar to NamedPipeStream doesn&apos;t support SetLength.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.NextResultIsClosed">
            <summary>
              Looks up a localized string similar to Invalid attempt to call NextResult when the reader is closed..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.NoBodiesAndTypeNotSet">
            <summary>
              Looks up a localized string similar to When calling stored procedures and &apos;Use Procedure Bodies&apos; is false, all parameters must have their type explicitly set..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.NoNestedTransactions">
            <summary>
              Looks up a localized string similar to Nested transactions are not supported..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ObjectDisposed">
            <summary>
              Looks up a localized string similar to The object is not open or has been disposed..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.OffsetCannotBeNegative">
            <summary>
              Looks up a localized string similar to  Offset cannot be negative.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.OffsetMustBeValid">
            <summary>
              Looks up a localized string similar to Offset must be a valid position in buffer.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ParameterAlreadyDefined">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; has already been defined..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ParameterCannotBeNegative">
            <summary>
              Looks up a localized string similar to Parameter cannot have a negative value.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ParameterCannotBeNull">
            <summary>
              Looks up a localized string similar to Parameter cannot be null.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ParameterIsInvalid">
            <summary>
              Looks up a localized string similar to Parameter is invalid..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ParameterMustBeDefined">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; must be defined..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.PasswordMustHaveLegalChars">
            <summary>
              Looks up a localized string similar to Password must be valid and contain length characters.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.PerfMonCategoryHelp">
            <summary>
              Looks up a localized string similar to This category includes a series of counters for MySQL..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.PerfMonCategoryName">
            <summary>
              Looks up a localized string similar to .NET Data Provider for MySQL.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.PerfMonHardProcHelp">
            <summary>
              Looks up a localized string similar to The number of times a procedures metadata had to be queried from the server..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.PerfMonHardProcName">
            <summary>
              Looks up a localized string similar to Hard Procedure Queries.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.PerfMonSoftProcHelp">
            <summary>
              Looks up a localized string similar to The number of times a procedures metadata was retrieved from the client-side cache..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.PerfMonSoftProcName">
            <summary>
              Looks up a localized string similar to Soft Procedure Queries.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ProcAndFuncSameName">
            <summary>
              Looks up a localized string similar to same name are not supported..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.QueryTooLarge">
            <summary>
              Looks up a localized string similar to Packets larger than max_allowed_packet are not allowed..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.ReadFromStreamFailed">
            <summary>
              Looks up a localized string similar to Reading from the stream has failed..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.SocketNoSeek">
            <summary>
              Looks up a localized string similar to Socket streams do not support seeking.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.SoftProcQuery">
            <summary>
              Looks up a localized string similar to Retrieving procedure metadata for {0} from procedure cache..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.SPNotSupported">
            <summary>
              Looks up a localized string similar to Stored procedures are not supported on this version of MySQL.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.StreamAlreadyClosed">
            <summary>
              Looks up a localized string similar to The stream has already been closed.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.StreamNoRead">
            <summary>
              Looks up a localized string similar to  The stream does not support reading.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.StreamNoWrite">
            <summary>
              Looks up a localized string similar to The stream does not support writing.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.Timeout">
            <summary>
              Looks up a localized string similar to Timeout expired.  The timeout period elapsed prior to completion of the operation or the server is not responding..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.TimeoutGettingConnection">
            <summary>
              Looks up a localized string similar to error connecting: Timeout expired.  The timeout period elapsed prior to obtaining a connection from the pool.  This may have occurred because all pooled connections were in use and max pool size was reached..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.UnableToConnectToHost">
            <summary>
              Looks up a localized string similar to Unable to connect to any of the specified MySQL hosts..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.UnableToExecuteSP">
            <summary>
              Looks up a localized string similar to Unable to execute stored procedure &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.UnableToParseFK">
            <summary>
              Looks up a localized string similar to There was an error parsing the foreign key definition..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.UnableToRetrieveSProcData">
            <summary>
              Looks up a localized string similar to Unable to retrieve stored procedure metadata.  Either grant  SELECT privilege to mysql.proc for this user or use &quot;use procedure bodies=false&quot; with  your connection string..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.UnixSocketsNotSupported">
            <summary>
              Looks up a localized string similar to Unix sockets are not supported on Windows.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.WriteToStreamFailed">
            <summary>
              Looks up a localized string similar to Writing to the stream failed..
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.Properties.Resources.WrongParameterName">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; is not found but a parameter with the name &apos;{1}&apos; is found. Parameter names must include the leading parameter marker..
            </summary>
        </member>
        <member name="M:zlib.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:zlib.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:zlib.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:zlib.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:zlib.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:zlib.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:zlib.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:zlib.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:zlib.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:zlib.SupportClass.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:zlib.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:zlib.SupportClass.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars
            </summary>
            <param name="byteArray">The array of bytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="M:zlib.SupportClass.Serialize(System.IO.Stream,System.Object)">
            <summary>
            Writes an object to the specified Stream
            </summary>
            <param name="stream">The target Stream</param>
            <param name="objectToSend">The object to be sent</param>
        </member>
        <member name="M:zlib.SupportClass.Serialize(System.IO.BinaryWriter,System.Object)">
            <summary>
            Writes an object to the specified BinaryWriter
            </summary>
            <param name="binaryWriter">The target BinaryWriter</param>
            <param name="objectToSend">The object to be sent</param>
        </member>
        <member name="M:zlib.SupportClass.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserializes an object, or an entire graph of connected objects, and returns the object intance
            </summary>
            <param name="binaryReader">Reader instance used to read the object</param>
            <returns>The object instance</returns>
        </member>
        <member name="M:zlib.SupportClass.WriteStackTrace(System.Exception,System.IO.TextWriter)">
            <summary>
            Writes the exception stack trace to the received stream
            </summary>
            <param name="throwable">Exception to obtain information from</param>
            <param name="stream">Output sream used to write to</param>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlParameterCollection">
            <summary>
            Represents a collection of parameters relevant to a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> as well as their respective mappings to columns in a <see cref="T:System.Data.DataSet"/>. This class cannot be inherited.
            </summary>
            <remarks>
      The number of the parameters in the collection must be equal to the number of
      parameter placeholders within the command text, or an exception will be generated.
    </remarks><example>
      The following example creates multiple instances of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/>
      through the <B>MySqlParameterCollection</B> collection within the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
      These parameters are used to select data within the data source and place the data in
      the <see cref="T:System.Data.DataSet"/>. This code assumes that a <B>DataSet</B> and a <B>MySqlDataAdapter</B>
      have already been created with the appropriate schema, commands, and connection.
      <code lang="vbnet">
        Public Sub AddParameters()
        ' ...
        ' create myDataSet and myDataAdapter
        ' ...
        myDataAdapter.SelectCommand.Parameters.Add("@CategoryName", MySqlDbType.VarChar, 80).Value = "toasters"
        myDataAdapter.SelectCommand.Parameters.Add("@SerialNum", MySqlDbType.Long).Value = 239

        myDataAdapter.Fill(myDataSet)
        End Sub 'AddSqlParameters
      </code>
      <code lang="C#">
        public void AddSqlParameters()
        {
        // ...
        // create myDataSet and myDataAdapter
        // ...

        myDataAdapter.SelectCommand.Parameters.Add("@CategoryName", MySqlDbType.VarChar, 80).Value = "toasters";
        myDataAdapter.SelectCommand.Parameters.Add("@SerialNum", MySqlDbType.Long).Value = 239;
        myDataAdapter.Fill(myDataSet);

        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(MySql.Data.MySqlClient.MySqlParameter)">
            <summary>
            Adds the specified <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>.
            </summary>
            <param name="value">The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to add to the collection.</param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(System.String,System.Object)">
            <summary>
            Adds a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> given the specified parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to add to the collection.</param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.AddWithValue(System.String,System.Object)">
            <summary>
            Adds a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> given the specified parameter name and value.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="value">The <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to add to the collection.</param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(System.String,MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
            Adds a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> given the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the <see cref="T:MySql.Data.MySqlClient.MySqlDbType"/> values. </param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32)">
            <summary>
            Adds a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> with the parameter name, the data type, and the column length.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the <see cref="T:MySql.Data.MySqlClient.MySqlDbType"/> values. </param>
            <param name="size">The length of the column.</param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> with the parameter name, the data type, the column length, and the source column name.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="dbType">One of the <see cref="T:MySql.Data.MySqlClient.MySqlDbType"/> values. </param>
            <param name="size">The length of the column.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <returns>The newly added <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.AddRange(System.Array)">
            <summary>
            Adds an array of values to the end of the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>. 
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.GetParameter(System.String)">
            <summary>
            Retrieve the parameter with the given name.
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Add(System.Object)">
            <summary>
            Adds the specified <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>.
            </summary>
            <param name="value">The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> to add to the collection.</param>
            <returns>The index of the new <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Contains(System.String)">
            <summary>
            Gets a value indicating whether a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> with the specified parameter name exists in the collection.
            </summary>
            <param name="parameterName">The name of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to find.</param>
            <returns>true if the collection contains the parameter; otherwise, false.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Contains(System.Object)">
            <summary>
            Gets a value indicating whether a MySqlParameter exists in the collection.
            </summary>
            <param name="value">The value of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to find. </param>
            <returns>true if the collection contains the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object; otherwise, false.</returns>
            <overloads>Gets a value indicating whether a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> exists in the collection.</overloads>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies MySqlParameter objects from the MySqlParameterCollection to the specified array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.IndexOf(System.String)">
            <summary>
            Gets the location of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> in the collection with a specific parameter name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to retrieve. </param>
            <returns>The zero-based location of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> in the collection.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.IndexOf(System.Object)">
            <summary>
            Gets the location of a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> in the collection.
            </summary>
            <param name="value">The <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to locate. </param>
            <returns>The zero-based location of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> in the collection.</returns>
            <overloads>Gets the location of a <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> in the collection.</overloads>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts a MySqlParameter into the collection at the specified index.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.Remove(System.Object)">
            <summary>
            Removes the specified MySqlParameter from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.RemoveAt(System.String)">
            <summary>
            Removes the specified <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> from the collection using the parameter name.
            </summary>
            <param name="parameterName">The name of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> object to retrieve. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameterCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the specified <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> from the collection using a specific index.
            </summary>
            <param name="index">The zero-based index of the parameter. </param>
            <overloads>Removes the specified <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> from the collection.</overloads>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameterCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> at the specified index.
            </summary>
            <overloads>Gets the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> with a specified attribute.
            [C#] In C#, this property is the indexer for the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/> class.
            </overloads>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameterCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> with the specified name.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameterCollection.Count">
            <summary>
            Gets the number of MySqlParameter objects in the collection.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameterCollection.IsFixedSize">
            <summary>
            Gets a value that indicates whether the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>
            has a fixed size. 
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameterCollection.IsReadOnly">
            <summary>
            Gets a value that indicates whether the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>
            is read-only. 
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameterCollection.IsSynchronized">
            <summary>
            Gets a value that indicates whether the <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>
            is synchronized. 
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameterCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the 
            <see cref="T:MySql.Data.MySqlClient.MySqlParameterCollection"/>. 
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlConnectionStringBuilder">
            <!-- No matching elements were found for the following include tag --><include file="docs/MySqlConnectionStringBuilder.xml" path="docs/Class/*"/>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlConnectionStringBuilder"/> class. 
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlConnectionStringBuilder"/> class. 
            The provided connection string provides the data for the instance's internal 
            connection information. 
            </summary>
            <param name="connectionString">The basis for the object's internal connection 
            information. Parsed into name/value pairs. Invalid key names raise 
            <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.GetConnectionString(System.Boolean)">
            <summary>
            Takes a given connection string and returns it, possible
            stripping out the password info
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.Clear">
            <summary>
            Clears the contents of the <see cref="T:MySql.Data.MySqlClient.MySqlConnectionStringBuilder"/> instance. 
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.Remove(System.String)">
            <summary>
            Removes the entry with the specified key from the <see cref="T:System.Data.Common.DbConnectionStringBuilder"></see> instance.
            </summary>
            <param name="keyword">The key of the key/value pair to be removed from the connection string in this <see cref="T:System.Data.Common.DbConnectionStringBuilder"></see>.</param>
            <returns>
            true if the key existed within the connection string and was removed; false if the key did not exist.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Data.Common.DbConnectionStringBuilder"></see> is read-only, or the <see cref="T:System.Data.Common.DbConnectionStringBuilder"></see> has a fixed size.</exception>
            <exception cref="T:System.ArgumentNullException">keyword is null (Nothing in Visual Basic)</exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/></PermissionSet>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
            <summary>
            Retrieves a value corresponding to the supplied key from this <see cref="T:System.Data.Common.DbConnectionStringBuilder"></see>.
            </summary>
            <param name="keyword">The key of the item to retrieve.</param>
            <param name="value">The value corresponding to the key.</param>
            <returns>
            true if keyword was found within the connection string, false otherwise.
            </returns>
            <exception cref="T:System.ArgumentNullException">keyword contains a null value (Nothing in Visual Basic).</exception>
            <PermissionSet><IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/></PermissionSet>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.Server">
            <summary>
            Gets or sets the name of the server.
            </summary>
            <value>The server.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.Database">
            <summary>
            Gets or sets the name of the database the connection should 
            initially connect to.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.ConnectionProtocol">
            <summary>
            Gets or sets the protocol that should be used for communicating
            with MySQL.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.PipeName">
            <summary>
            Gets or sets the name of the named pipe that should be used
            for communicating with MySQL.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.UseCompression">
            <summary>
            Gets or sets a boolean value that indicates whether this connection
            should use compression.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.AllowBatch">
            <summary>
            Gets or sets a boolean value that indicates whether this connection will allow
            commands to send multiple SQL statements in one execution.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.Logging">
            <summary>
            Gets or sets a boolean value that indicates whether logging is enabled.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.SharedMemoryName">
            <summary>
            Gets or sets the base name of the shared memory objects used to 
            communicate with MySQL when the shared memory protocol is being used.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.UseOldSyntax">
            <summary>
            Gets or sets a boolean value that indicates whether this connection uses
            the old style (@) parameter markers or the new (?) style.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.DriverType">
            <summary>
            Gets or sets the driver type that should be used for this connection.
            </summary>
            <remarks>
            There is only one valid value for this setting currently.
            </remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.Port">
            <summary>
            Gets or sets the port number that is used when the socket
            protocol is being used.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.ConnectionTimeout">
            <summary>
            Gets or sets the connection timeout.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.DefaultCommandTimeout">
            <summary>
            Gets or sets the default command timeout.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.UserID">
            <summary>
            Gets or sets the user id that should be used to connect with.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.Password">
            <summary>
            Gets or sets the password that should be used to connect with.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.PersistSecurityInfo">
            <summary>
            Gets or sets a boolean value that indicates if the password should be persisted
            in the connection string.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.AllowZeroDateTime">
            <summary>
            Gets or sets a boolean value that indicates if zero date time values are supported.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.ConvertZeroDateTime">
            <summary>
            Gets or sets a boolean value indicating if zero datetime values should be 
            converted to DateTime.MinValue.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.UseUsageAdvisor">
            <summary>
            Gets or sets a boolean value indicating if the Usage Advisor should be enabled.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.ProcedureCacheSize">
            <summary>
            Gets or sets the size of the stored procedure cache.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.UsePerformanceMonitor">
            <summary>
            Gets or sets a boolean value indicating if the permon hooks should be enabled.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.IgnorePrepare">
            <summary>
            Gets or sets a boolean value indicating if calls to Prepare() should be ignored.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.ConnectionLifeTime">
            <summary>
            Gets or sets the lifetime of a pooled connection.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.Pooling">
            <summary>
            Gets or sets a boolean value indicating if connection pooling is enabled.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.MinimumPoolSize">
            <summary>
            Gets the minimum connection pool size.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.MaximumPoolSize">
            <summary>
            Gets or sets the maximum connection pool setting.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.ConnectionReset">
            <summary>
            Gets or sets a boolean value indicating if the connection should be reset when retrieved
            from the pool.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.CharacterSet">
            <summary>
            Gets or sets the character set that should be used for sending queries to the server.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.TreatBlobsAsUTF8">
            <summary>
            Indicates whether the driver should treat binary blobs as UTF8
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.BlobAsUTF8IncludePattern">
            <summary>
            Gets or sets the pattern that matches the columns that should be treated as UTF8
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.BlobAsUTF8ExcludePattern">
            <summary>
            Gets or sets the pattern that matches the columns that should not be treated as UTF8
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnectionStringBuilder.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key. In C#, this property 
            is the indexer. 
            </summary>
            <param name="keyword">The key of the item to get or set.</param>
            <returns>The value associated with the specified key. </returns>
        </member>
        <member name="T:MySql.Data.Common.SharedMemoryStream">
            <summary>
            Summary description for SharedMemoryStream.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlParameter">
            <summary>
            Represents a parameter to a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, and optionally, its mapping to <see cref="T:System.Data.DataSet"/> columns. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor">
            <summary>
            Initializes a new instance of the MySqlParameter class.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> class with the parameter name and a value of the new MySqlParameter.
            </summary>
            <param name="parameterName">The name of the parameter to map. </param>
            <param name="value">An <see cref="T:System.Object"/> that is the value of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/>. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor(System.String,MySql.Data.MySqlClient.MySqlDbType)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> class with the parameter name and the data type.
            </summary>
            <param name="parameterName">The name of the parameter to map. </param>
            <param name="dbType">One of the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/> values. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> class with the parameter name, the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/>, and the size.
            </summary>
            <param name="parameterName">The name of the parameter to map. </param>
            <param name="dbType">One of the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/> values. </param>
            <param name="size">The length of the parameter. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> class with the parameter name, the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/>, the size, and the source column name.
            </summary>
            <param name="parameterName">The name of the parameter to map. </param>
            <param name="dbType">One of the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/> values. </param>
            <param name="size">The length of the parameter. </param>
            <param name="sourceColumn">The name of the source column. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.#ctor(System.String,MySql.Data.MySqlClient.MySqlDbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> class with the parameter name, the type of the parameter, the size of the parameter, a <see cref="T:System.Data.ParameterDirection"/>, the precision of the parameter, the scale of the parameter, the source column, a <see cref="T:System.Data.DataRowVersion"/> to use, and the value of the parameter.
            </summary>
            <param name="parameterName">The name of the parameter to map. </param>
            <param name="dbType">One of the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType"/> values. </param>
            <param name="size">The length of the parameter. </param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection"/> values. </param>
            <param name="isNullable">true if the value of the field can be null, otherwise false. </param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> is resolved.</param>
            <param name="scale">The total number of decimal places to which <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> is resolved. </param>
            <param name="sourceColumn">The name of the source column. </param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion"/> values. </param>
            <param name="value">An <see cref="T:System.Object"/> that is the value of the <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/>. </param>
            <exception cref="T:System.ArgumentException"/>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.ToString">
            <summary>
            Overridden. Gets a string containing the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.ParameterName"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlParameter.ResetDbType">
            <summary>
            Resets the <b>DbType</b> property to its original settings. 
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.DbType">
            <summary>
            Gets or sets the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.DbType"/> of the parameter.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.
            As of MySql version 4.1 and earlier, input-only is the only valid choice.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.IsNullable">
            <summary>
            Gets or sets a value indicating whether the parameter accepts null values.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.MySqlDbType">
            <summary>
            Gets or sets the MySqlDbType of the parameter.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.ParameterName">
            <summary>
            Gets or sets the name of the MySqlParameter.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.Precision">
            <summary>
            Gets or sets the maximum number of digits used to represent the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> property.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/> is resolved.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.Size">
            <summary>
            Gets or sets the maximum size, in bytes, of the data within the column.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column that is mapped to the <see cref="T:System.Data.DataSet"/> and used for loading or returning the <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/>.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion"/> to use when loading <see cref="P:MySql.Data.MySqlClient.MySqlParameter.Value"/>.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlParameter.SourceColumnNullMapping">
            <summary>
            Sets or gets a value which indicates whether the source column is nullable. 
            This allows <see cref="T:System.Data.Common.DbCommandBuilder"/> to correctly generate Update statements 
            for nullable columns. 
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlHelper">
            <summary>
            Helper class that makes it easier to work with the provider.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteNonQuery(MySql.Data.MySqlClient.MySqlConnection,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single command against a MySQL database.  The <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is assumed to be
            open when the method is called and remains open after the method completes.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">SQL command to be executed</param>
            <param name="commandParameters">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command.</param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteNonQuery(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single command against a MySQL database.  A new <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is created
            using the <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> given.
            </summary>
            <param name="connectionString"><see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> to use</param>
            <param name="commandText">SQL command to be executed</param>
            <param name="parms">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command.</param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteDataRow(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single SQL command and returns the first row of the resultset.  A new MySqlConnection object
            is created, opened, and closed during this method.
            </summary>
            <param name="connectionString">Settings to be used for the connection</param>
            <param name="commandText">Command to execute</param>
            <param name="parms">Parameters to use for the command</param>
            <returns>DataRow containing the first row of the resultset</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteDataset(System.String,System.String)">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            A new MySqlConnection object is created, opened, and closed during this method.
            </summary>
            <param name="connectionString">Settings to be used for the connection</param>
            <param name="commandText">Command to execute</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteDataset(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            A new MySqlConnection object is created, opened, and closed during this method.
            </summary>
            <param name="connectionString">Settings to be used for the connection</param>
            <param name="commandText">Command to execute</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            The state of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object remains unchanged after execution
            of this method.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command to execute</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteDataset(MySql.Data.MySqlClient.MySqlConnection,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single SQL command and returns the resultset in a <see cref="T:System.Data.DataSet"/>.  
            The state of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object remains unchanged after execution
            of this method.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command to execute</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns><see cref="T:System.Data.DataSet"/> containing the resultset</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.UpdateDataSet(System.String,System.String,System.Data.DataSet,System.String)">
            <summary>
            Updates the given table with data from the given <see cref="T:System.Data.DataSet"/>
            </summary>
            <param name="connectionString">Settings to use for the update</param>
            <param name="commandText">Command text to use for the update</param>
            <param name="ds"><see cref="T:System.Data.DataSet"/> containing the new data to use in the update</param>
            <param name="tablename">Tablename in the dataset to update</param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteReader(MySql.Data.MySqlClient.MySqlConnection,MySql.Data.MySqlClient.MySqlTransaction,System.String,MySql.Data.MySqlClient.MySqlParameter[],System.Boolean)">
            <summary>
            Executes a single command against a MySQL database, possibly inside an existing transaction.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use for the command</param>
            <param name="transaction"><see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/> object to use for the command</param>
            <param name="commandText">Command text to use</param>
            <param name="commandParameters">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command</param>
            <param name="ExternalConn">True if the connection should be preserved, false if not</param>
            <returns><see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object ready to read the results of the command</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteReader(System.String,System.String)">
            <summary>
            Executes a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for this command</param>
            <param name="commandText">Command text to use</param>
            <returns><see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object ready to read the results of the command</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteReader(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Executes a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for this command</param>
            <param name="commandText">Command text to use</param>
            <param name="commandParameters">Array of <see cref="T:MySql.Data.MySqlClient.MySqlParameter"/> objects to use with the command</param>
            <returns><see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> object ready to read the results of the command</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar(System.String,System.String)">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for the update</param>
            <param name="commandText">Command text to use for the update</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar(System.String,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connectionString">Settings to use for the command</param>
            <param name="commandText">Command text to use for the command</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command text to use for the command</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.ExecuteScalar(MySql.Data.MySqlClient.MySqlConnection,System.String,MySql.Data.MySqlClient.MySqlParameter[])">
            <summary>
            Execute a single command against a MySQL database.
            </summary>
            <param name="connection"><see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object to use</param>
            <param name="commandText">Command text to use for the command</param>
            <param name="commandParameters">Parameters to use for the command</param>
            <returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlHelper.EscapeString(System.String)">
            <summary>
            Escapes the string.
            </summary>
            <param name="value">The string to escape</param>
            <returns>The string with all quotes escaped.</returns>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlField">
            <summary>
            Summary description for Field.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.CompressedStream">
            <summary>
            Summary description for CompressedStream.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlStream">
            <summary>
            Summary description for MySqlStream.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlStream.OpenPacket">
            <summary>
            OpenPacket is called by NativeDriver to start reading the next
            packet on the stream.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlStream.LoadPacket">
            <summary>
            LoadPacket loads up and decodes the header of the incoming packet.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlStream.SkipPacket">
            <summary>
            SkipPacket will read the remaining bytes of a packet into a small
            local buffer and discard them.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlStream.StartOutput(System.UInt64,System.Boolean)">
            <summary>
            StartOutput is used to reset the write state of the stream.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlStream.WriteHeader">
            <summary>
            Writes out the header that is used at the start of a transmission
            and at the beginning of every packet when multipacket is used.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlStream.ReadByte">
            <summary>
            Reads the next byte from the incoming stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the input stream into the given buffer.
            </summary>
            <returns>The number of bytes read.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlStream.PeekByte">
            <summary>
            Peek at the next byte off the stream
            </summary>
            <returns>The next byte off the stream</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the output stream.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlStream.WriteInteger(System.Int64,System.Int32)">
            <summary>
            WriteInteger
            </summary>
            <param name="v"></param>
            <param name="numbytes"></param>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlClientFactory">
            <summary>
            DBProviderFactory implementation for MysqlClient.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlClientFactory.Instance">
            <summary>
            Gets an instance of the <see cref="T:MySql.Data.MySqlClient.MySqlClientFactory"/>. 
            This can be used to retrieve strongly typed data objects. 
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlClientFactory.CreateCommandBuilder">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbCommandBuilder"/> instance. 
            </summary>
            <returns>A new strongly typed instance of <b>DbCommandBuilder</b>.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlClientFactory.CreateCommand">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbCommand"/> instance. 
            </summary>
            <returns>A new strongly typed instance of <b>DbCommand</b>.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlClientFactory.CreateConnection">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbConnection"/> instance. 
            </summary>
            <returns>A new strongly typed instance of <b>DbConnection</b>.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlClientFactory.CreateDataAdapter">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbDataAdapter"/> instance. 
            </summary>
            <returns>A new strongly typed instance of <b>DbDataAdapter</b>. </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlClientFactory.CreateParameter">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbParameter"/> instance. 
            </summary>
            <returns>A new strongly typed instance of <b>DbParameter</b>.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlClientFactory.CreateConnectionStringBuilder">
            <summary>
            Returns a strongly typed <see cref="T:System.Data.Common.DbConnectionStringBuilder"/> instance. 
            </summary>
            <returns>A new strongly typed instance of <b>DbConnectionStringBuilder</b>.</returns>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlClientFactory.CanCreateDataSourceEnumerator">
            <summary>
            Returns true if a <b>MySqlDataSourceEnumerator</b> can be created; 
            otherwise false. 
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlBulkLoader">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlBulkLoader.Load">
            <summary>
            Execute the load operation
            </summary>
            <returns>The number of rows inserted.</returns>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.FieldTerminator">
            <summary>
            Gets or sets the field terminator.
            </summary>
            <value>The field terminator.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.LineTerminator">
            <summary>
            Gets or sets the line terminator.
            </summary>
            <value>The line terminator.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>The name of the table.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.CharacterSet">
            <summary>
            Gets or sets the character set.
            </summary>
            <value>The character set.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.FileName">
            <summary>
            Gets or sets the name of the file.
            </summary>
            <value>The name of the file.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.Timeout">
            <summary>
            Gets or sets the timeout.
            </summary>
            <value>The timeout.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.Local">
            <summary>
            Gets or sets a value indicating whether the filename that is to be loaded
            is local to the client or not
            </summary>
            <value><c>true</c> if local; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.NumberOfLinesToSkip">
            <summary>
            Gets or sets the number of lines to skip.
            </summary>
            <value>The number of lines to skip.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.LinePrefix">
            <summary>
            Gets or sets the line prefix.
            </summary>
            <value>The line prefix.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.FieldQuotationCharacter">
            <summary>
            Gets or sets the field quotation character.
            </summary>
            <value>The field quotation character.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.FieldQuotationOptional">
            <summary>
            Gets or sets a value indicating whether [field quotation optional].
            </summary>
            <value>
            	<c>true</c> if [field quotation optional]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.EscapeCharacter">
            <summary>
            Gets or sets the escape character.
            </summary>
            <value>The escape character.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.ConflictOption">
            <summary>
            Gets or sets the conflict option.
            </summary>
            <value>The conflict option.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.Priority">
            <summary>
            Gets or sets the priority.
            </summary>
            <value>The priority.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlBulkLoader.Expressions">
            <summary>
            Gets the expressions.
            </summary>
            <value>The expressions.</value>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlBulkLoaderPriority">
            <summary>
            
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlBulkLoaderPriority.None">
            <summary>
            This is the default and indicates normal priority
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlBulkLoaderPriority.Low">
            <summary>
            Low priority will cause the load operation to wait until all readers of the table
            have finished.  This only affects storage engines that use only table-level locking
            such as MyISAM, Memory, and Merge.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlBulkLoaderPriority.Concurrent">
            <summary>
            Concurrent priority is only relevant for MyISAM tables and signals that if the table
            has no free blocks in the middle that other readers can retrieve data from the table
            while the load operation is happening.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlBulkLoaderConflictOption">
            <summary>
            
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlBulkLoaderConflictOption.None">
            <summary>
            This is the default and indicates normal operation.  In the event of a LOCAL load, this
            is the same as ignore.  When the data file is on the server, then a key conflict will
            cause an error to be thrown and the rest of the data file ignored.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlBulkLoaderConflictOption.Replace">
            <summary>
            Replace column values when a key conflict occurs.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlBulkLoaderConflictOption.Ignore">
            <summary>
            Ignore any rows where the primary key conflicts.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.SchemaProvider.GetForeignKeysOnTable(System.Data.DataTable,System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            GetForeignKeysOnTable retrieves the foreign keys on the given table.
            Since MySQL supports foreign keys on versions prior to 5.0, we can't  use
            information schema.  MySQL also does not include any type of SHOW command
            for foreign keys so we have to resort to use SHOW CREATE TABLE and parsing
            the output.
            </summary>
            <param name="fkTable">The table to store the key info in.</param>
            <param name="tableToParse">The table to get the foeign key info for.</param>
            <param name="filterName">Only get foreign keys that match this name.</param>
            <param name="includeColumns">Should column information be included in the table.</param>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlDataAdapter">
            <summary>
      Represents a set of data commands and a database connection that are used to fill a dataset and update a MySQL database. This class cannot be inherited.
    </summary><remarks>
      <para>
        The <B>MySQLDataAdapter</B>, serves as a bridge between a <see cref="T:System.Data.DataSet"/>
        and MySQL for retrieving and saving data. The <B>MySQLDataAdapter</B> provides this
        bridge by mapping <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/>, which changes the data in the
        <B>DataSet</B> to match the data in the data source, and <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>,
        which changes the data in the data source to match the data in the <B>DataSet</B>,
        using the appropriate SQL statements against the data source.
      </para>
      <para>
        When the <B>MySQLDataAdapter</B> fills a <B>DataSet</B>, it will create the necessary
        tables and columns for the returned data if they do not already exist. However, primary
        key information will not be included in the implicitly created schema unless the
        <see cref="T:System.Data.MissingSchemaAction"/> property is set to <see cref="F:System.Data.MissingSchemaAction.AddWithKey"/>.
        You may also have the <B>MySQLDataAdapter</B> create the schema of the <B>DataSet</B>,
        including primary key information, before filling it with data using <see cref="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)"/>.
      </para>
      <para>
        <B>MySQLDataAdapter</B> is used in conjunction with <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>
        and <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> to increase performance when connecting to a MySQL database.
      </para>
      <para>
        The <B>MySQLDataAdapter</B> also includes the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/>,
        <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.InsertCommand"/>, <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.DeleteCommand"/>,
        <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.UpdateCommand"/>, and <see cref="P:System.Data.Common.DataAdapter.TableMappings"/>
        properties to facilitate the loading and updating of data.
      </para>
      <para>
        When an instance of <B>MySQLDataAdapter</B> is created, the read/write properties
        are set to initial values. For a list of these values, see the <B>MySQLDataAdapter</B>
        constructor.
      </para>
      <note>
        Please be aware that the <see cref="T:System.Data.DataColumn"/> class allows only
        Int16, Int32, and Int64 to have the AutoIncrement property set.
        If you plan to use autoincremement columns with MySQL, you should consider
        using signed integer columns.
      </note>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>.
      The <B>MySqlConnection</B> is opened and set as the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/> for the
      <B>MySqlCommand</B>. The example then calls <see cref="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery"/>, and closes
      the connection. To accomplish this, the <B>ExecuteNonQuery</B> is
      passed a connection string and a query string that is a SQL INSERT
      statement.
      <code lang="vbnet">
        Public Function SelectRows(dataSet As DataSet, connection As String, query As String) As DataSet
        Dim conn As New MySqlConnection(connection)
        Dim adapter As New MySqlDataAdapter()
        adapter.SelectCommand = new MySqlCommand(query, conn)
        adapter.Fill(dataset)
        Return dataset
        End Function
      </code>
      <code lang="C#">
        public DataSet SelectRows(DataSet dataset,string connection,string query)
        {
        MySqlConnection conn = new MySqlConnection(connection);
        MySqlDataAdapter adapter = new MySqlDataAdapter();
        adapter.SelectCommand = new MySqlCommand(query, conn);
        adapter.Fill(dataset);
        return dataset;
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.#ctor">
            <overloads></overloads><summary>
      Initializes a new instance of the MySqlDataAdapter class.
    </summary><remarks>
      <para>
        When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> is created,
        the following read/write properties are set to the following initial
        values.
      </para>
      <list type="table">
        <listheader>
          <term>Properties</term>
          <term>Initial Value</term>
        </listheader>
        <item>
          <term>
            <see cref="T:System.Data.MissingMappingAction"/>
          </term>
          <term>
            <B>MissingMappingAction.Passthrough</B>
          </term>
        </item>
        <item>
          <term>
            <see cref="T:System.Data.MissingSchemaAction"/>
          </term>
          <term>
            <B>MissingSchemaAction.Add</B>
          </term>
        </item>
      </list>
      <para>
        You can change the value of any of these properties through a separate call
        to the property.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets some of
      its properties.
      <code lang="vbnet">
        Public Sub CreateSqlDataAdapter()
        Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;" &amp; _
        "database=test")
        Dim da As MySqlDataAdapter = New MySqlDataAdapter
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey

        da.SelectCommand = New MySqlCommand("SELECT id, name FROM mytable", conn)
        da.InsertCommand = New MySqlCommand("INSERT INTO mytable (id, name) " &amp; _
        "VALUES (@id, @name)", conn)
        da.UpdateCommand = New MySqlCommand("UPDATE mytable SET id=@id, name=@name " &amp; _
        "WHERE id=@oldId", conn)
        da.DeleteCommand = New MySqlCommand("DELETE FROM mytable WHERE id=@id", conn)

        da.InsertCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id")
        da.InsertCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name")

        da.UpdateCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id")
        da.UpdateCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name")
        da.UpdateCommand.Parameters.Add("@oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original

        da.DeleteCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original
        End Sub
      </code>
      <code lang="C#">
        public static void CreateSqlDataAdapter()
        {
        MySqlConnection conn = new MySqlConnection("Data Source=localhost;database=test");
        MySqlDataAdapter da = new MySqlDataAdapter();
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey;

        da.SelectCommand = new MySqlCommand("SELECT id, name FROM mytable", conn);
        da.InsertCommand = new MySqlCommand("INSERT INTO mytable (id, name) " +
        "VALUES (@id, @name)", conn);
        da.UpdateCommand = new MySqlCommand("UPDATE mytable SET id=@id, name=@name " +
        "WHERE id=@oldId", conn);
        da.DeleteCommand = new MySqlCommand("DELETE FROM mytable WHERE id=@id", conn);

        da.InsertCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id");
        da.InsertCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name");

        da.UpdateCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id");
        da.UpdateCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name");
        da.UpdateCommand.Parameters.Add("@oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;

        da.DeleteCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.#ctor(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
      Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> class with
      the specified <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> as the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/>
      property.
    </summary><param name="selectCommand">
      <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> that is a SQL SELECT statement or stored procedure and is set
      as the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
    </param><remarks>
      <para>
        When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> is created,
        the following read/write properties are set to the following initial
        values.
      </para>
      <list type="table">
        <listheader>
          <term>Properties</term>
          <term>Initial Value</term>
        </listheader>
        <item>
          <term>
            <see cref="T:System.Data.MissingMappingAction"/>
          </term>
          <term>
            <B>MissingMappingAction.Passthrough</B>
          </term>
        </item>
        <item>
          <term>
            <see cref="T:System.Data.MissingSchemaAction"/>
          </term>
          <term>
            <B>MissingSchemaAction.Add</B>
          </term>
        </item>
      </list>
      <para>
        You can change the value of any of these properties through a separate call
        to the property.
      </para>
      <para>
        When <B>SelectCommand</B> (or any of the other command properties) is assigned
        to a previously created <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, the <B>MySqlCommand</B> is not cloned.
        The <B>SelectCommand</B> maintains a reference to the previously created <B>MySqlCommand</B>
        object.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets some of
      its properties.
      <code lang="vbnet">
        Public Sub CreateSqlDataAdapter()
        Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;" &amp; _
        "database=test")
        Dim cmd as new MySqlCommand("SELECT id, name FROM mytable", conn)
        Dim da As MySqlDataAdapter = New MySqlDataAdapter(cmd)
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey

        da.InsertCommand = New MySqlCommand("INSERT INTO mytable (id, name) " &amp; _
        "VALUES (@id, @name)", conn)
        da.UpdateCommand = New MySqlCommand("UPDATE mytable SET id=@id, name=@name " &amp; _
        "WHERE id=@oldId", conn)
        da.DeleteCommand = New MySqlCommand("DELETE FROM mytable WHERE id=@id", conn)

        da.InsertCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id")
        da.InsertCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name")

        da.UpdateCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id")
        da.UpdateCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name")
        da.UpdateCommand.Parameters.Add("@oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original

        da.DeleteCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original
        End Sub
      </code>
      <code lang="C#">
        public static void CreateSqlDataAdapter()
        {
        MySqlConnection conn = new MySqlConnection("Data Source=localhost;database=test");
        MySqlCommand cmd = new MySqlCommand("SELECT id, name FROM mytable", conn);
        MySqlDataAdapter da = new MySqlDataAdapter(cmd);
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey;

        da.InsertCommand = new MySqlCommand("INSERT INTO mytable (id, name) " +
        "VALUES (@id, @name)", conn);
        da.UpdateCommand = new MySqlCommand("UPDATE mytable SET id=@id, name=@name " +
        "WHERE id=@oldId", conn);
        da.DeleteCommand = new MySqlCommand("DELETE FROM mytable WHERE id=@id", conn);

        da.InsertCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id");
        da.InsertCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name");

        da.UpdateCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id");
        da.UpdateCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name");
        da.UpdateCommand.Parameters.Add("@oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;

        da.DeleteCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.#ctor(System.String,MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
      Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> class with
      a <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
    </summary><param name="selectCommandText">
      A <b>String</b> that is a SQL SELECT statement or stored procedure to be used by
      the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
    </param><param name="connection">
      A <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> that represents the connection.
    </param><remarks>
      <para>
        This implementation of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> opens and closes a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>
        if it is not already open. This can be useful in a an application that must call the
        <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/> method for two or more <B>MySqlDataAdapter</B> objects.
        If the <B>MySqlConnection</B> is already open, you must explicitly call
        <see cref="M:MySql.Data.MySqlClient.MySqlConnection.Close"/> or <see cref="M:MySql.Data.MySqlClient.MySqlConnection.Dispose(System.Boolean)"/> to close it.
      </para>
      <para>
        When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> is created,
        the following read/write properties are set to the following initial
        values.
      </para>
      <list type="table">
        <listheader>
          <term>Properties</term>
          <term>Initial Value</term>
        </listheader>
        <item>
          <term>
            <see cref="T:System.Data.MissingMappingAction"/>
          </term>
          <term>
            <B>MissingMappingAction.Passthrough</B>
          </term>
        </item>
        <item>
          <term>
            <see cref="T:System.Data.MissingSchemaAction"/>
          </term>
          <term>
            <B>MissingSchemaAction.Add</B>
          </term>
        </item>
      </list>
      <para>
        You can change the value of any of these properties through a separate call
        to the property.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets some of
      its properties.
      <code lang="vbnet">
        Public Sub CreateSqlDataAdapter()
        Dim conn As MySqlConnection = New MySqlConnection("Data Source=localhost;" &amp; _
        "database=test")
        Dim da As MySqlDataAdapter = New MySqlDataAdapter("SELECT id, name FROM mytable", conn)
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey

        da.InsertCommand = New MySqlCommand("INSERT INTO mytable (id, name) " &amp; _
        "VALUES (@id, @name)", conn)
        da.UpdateCommand = New MySqlCommand("UPDATE mytable SET id=@id, name=@name " &amp; _
        "WHERE id=@oldId", conn)
        da.DeleteCommand = New MySqlCommand("DELETE FROM mytable WHERE id=@id", conn)

        da.InsertCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id")
        da.InsertCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name")

        da.UpdateCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id")
        da.UpdateCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name")
        da.UpdateCommand.Parameters.Add("@oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original

        da.DeleteCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original
        End Sub
      </code>
      <code lang="C#">
        public static void CreateSqlDataAdapter()
        {
        MySqlConnection conn = new MySqlConnection("Data Source=localhost;database=test");
        MySqlDataAdapter da = new MySqlDataAdapter("SELECT id, name FROM mytable", conn);
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey;

        da.InsertCommand = new MySqlCommand("INSERT INTO mytable (id, name) " +
        "VALUES (@id, @name)", conn);
        da.UpdateCommand = new MySqlCommand("UPDATE mytable SET id=@id, name=@name " +
        "WHERE id=@oldId", conn);
        da.DeleteCommand = new MySqlCommand("DELETE FROM mytable WHERE id=@id", conn);

        da.InsertCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id");
        da.InsertCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name");

        da.UpdateCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id");
        da.UpdateCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name");
        da.UpdateCommand.Parameters.Add("@oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;

        da.DeleteCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.#ctor(System.String,System.String)">
            <summary>
      Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> class with
      a <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and a connection string.
    </summary><param name="selectCommandText">
      A <see cref="T:System.String"/> that is a SQL SELECT statement or stored procedure to
      be used by the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
    </param><param name="selectConnString">The connection string</param><remarks>
      <para>
        When an instance of <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> is created,
        the following read/write properties are set to the following initial
        values.
      </para>
      <list type="table">
        <listheader>
          <term>Properties</term>
          <term>Initial Value</term>
        </listheader>
        <item>
          <term>
            <see cref="T:System.Data.MissingMappingAction"/>
          </term>
          <term>
            <B>MissingMappingAction.Passthrough</B>
          </term>
        </item>
        <item>
          <term>
            <see cref="T:System.Data.MissingSchemaAction"/>
          </term>
          <term>
            <B>MissingSchemaAction.Add</B>
          </term>
        </item>
      </list>
      <para>
        You can change the value of any of these properties through a separate call
        to the property.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets some of
      its properties.
      <code lang="vbnet">
        Public Sub CreateSqlDataAdapter()
        Dim da As MySqlDataAdapter = New MySqlDataAdapter("SELECT id, name FROM mytable", "Data Source=localhost;database=test")
        Dim conn As MySqlConnection = da.SelectCommand.Connection
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey

        da.InsertCommand = New MySqlCommand("INSERT INTO mytable (id, name) " &amp; _
        "VALUES (@id, @name)", conn)
        da.UpdateCommand = New MySqlCommand("UPDATE mytable SET id=@id, name=@name " &amp; _
        "WHERE id=@oldId", conn)
        da.DeleteCommand = New MySqlCommand("DELETE FROM mytable WHERE id=@id", conn)

        da.InsertCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id")
        da.InsertCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name")

        da.UpdateCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id")
        da.UpdateCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name")
        da.UpdateCommand.Parameters.Add("@oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original

        da.DeleteCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original
        End Sub
      </code>
      <code lang="C#">
        public static void CreateSqlDataAdapter()
        {
        MySqlDataAdapter da = new MySqlDataAdapter("SELECT id, name FROM mytable", "Data Source=localhost;database=test");
        MySqlConnection conn = da.SelectCommand.Connection;
        da.MissingSchemaAction = MissingSchemaAction.AddWithKey;

        da.InsertCommand = new MySqlCommand("INSERT INTO mytable (id, name) " +
        "VALUES (@id, @name)", conn);
        da.UpdateCommand = new MySqlCommand("UPDATE mytable SET id=@id, name=@name " +
        "WHERE id=@oldId", conn);
        da.DeleteCommand = new MySqlCommand("DELETE FROM mytable WHERE id=@id", conn);

        da.InsertCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id");
        da.InsertCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name");

        da.UpdateCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id");
        da.UpdateCommand.Parameters.Add("@name", MySqlDbType.VarChar, 40, "name");
        da.UpdateCommand.Parameters.Add("@oldId", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;

        da.DeleteCommand.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id").SourceVersion = DataRowVersion.Original;
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Overridden. See <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)"/>.
            </summary>
            <param name="dataRow"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Overridden. See <see cref="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)"/>.
            </summary>
            <param name="dataRow"></param>
            <param name="command"></param>
            <param name="statementType"></param>
            <param name="tableMapping"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
            <summary>
            Overridden. Raises the RowUpdating event.
            </summary>
            <param name="value">A MySqlRowUpdatingEventArgs that contains the event data.</param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
            <summary>
            Overridden. Raises the RowUpdated event.
            </summary>
            <param name="value">A MySqlRowUpdatedEventArgs that contains the event data. </param>
        </member>
        <member name="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdating">
            <summary>
            Occurs during Update before a command is executed against the data source. The attempt to update is made, so the event fires.
            </summary>
        </member>
        <member name="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdated">
            <summary>
            Occurs during Update after a command is executed against the data source. The attempt to update is made, so the event fires.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataAdapter.DeleteCommand">
            <summary>
      Gets or sets a SQL statement or stored procedure used to delete records from the data set.
    </summary><value>
      A <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/> to delete records in the
      database that correspond to deleted rows in the <see cref="T:System.Data.DataSet"/>.
    </value><remarks>
      <para>
        During <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>, if this property is not set and primary key information
        is present in the <see cref="T:System.Data.DataSet"/>, the <B>DeleteCommand</B> can be generated
        automatically if you set the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property and use the
        <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/>.  Then, any additional commands that you do not set are
        generated by the <B>MySqlCommandBuilder</B>. This generation logic requires key column
        information to be present in the <B>DataSet</B>.
      </para>
      <para>
        When <B>DeleteCommand</B> is assigned to a previously created <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>,
        the <B>MySqlCommand</B> is not cloned. The <B>DeleteCommand</B> maintains a reference
        to the previously created <B>MySqlCommand</B> object.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets the
      <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and <B>DeleteCommand</B> properties. It assumes you have already
      created a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
      <code lang="vbnet">
        Public Shared Function CreateCustomerAdapter(conn As MySqlConnection) As MySqlDataAdapter

        Dim da As MySqlDataAdapter = New MySqlDataAdapter()
        Dim cmd As MySqlCommand
        Dim parm As MySqlParameter

        ' Create the SelectCommand.
        cmd = New MySqlCommand("SELECT * FROM mytable WHERE id=@id AND name=@name", conn)

        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15)
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15)

        da.SelectCommand = cmd

        ' Create the DeleteCommand.
        cmd = New MySqlCommand("DELETE FROM mytable WHERE id=@id", conn)

        parm = cmd.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id")
        parm.SourceVersion = DataRowVersion.Original

        da.DeleteCommand = cmd

        Return da
        End Function
      </code>
      <code lang="C#">
        public static MySqlDataAdapter CreateCustomerAdapter(MySqlConnection conn)
        {
        MySqlDataAdapter da = new MySqlDataAdapter();
        MySqlCommand cmd;
        MySqlParameter parm;

        // Create the SelectCommand.
        cmd = new MySqlCommand("SELECT * FROM mytable WHERE id=@id AND name=@name", conn);

        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15);
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15);

        da.SelectCommand = cmd;

        // Create the DeleteCommand.
        cmd = new MySqlCommand("DELETE FROM mytable WHERE id=@id", conn);

        parm = cmd.Parameters.Add("@id", MySqlDbType.VarChar, 5, "id");
        parm.SourceVersion = DataRowVersion.Original;

        da.DeleteCommand = cmd;

        return da;
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataAdapter.InsertCommand">
            <summary>
      Gets or sets a SQL statement or stored procedure used to insert records into the data set.
    </summary><value>
      A <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/> to insert records into the
      database that correspond to new rows in the <see cref="T:System.Data.DataSet"/>.
    </value><remarks>
      <para>
        During <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>, if this property is not set and primary key information
        is present in the <see cref="T:System.Data.DataSet"/>, the <B>InsertCommand</B> can be generated
        automatically if you set the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property and use the
        <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/>.  Then, any additional commands that you do not set are
        generated by the <B>MySqlCommandBuilder</B>. This generation logic requires key column
        information to be present in the <B>DataSet</B>.
      </para>
      <para>
        When <B>InsertCommand</B> is assigned to a previously created <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>,
        the <B>MySqlCommand</B> is not cloned. The <B>InsertCommand</B> maintains a reference
        to the previously created <B>MySqlCommand</B> object.
      </para>
      <note>
        If execution of this command returns rows, these rows may be added to the <B>DataSet</B>
        depending on how you set the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.UpdatedRowSource"/> property of the <B>MySqlCommand</B> object.
      </note>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets the
      <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and <B>InsertCommand</B> properties. It assumes you have already
      created a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
      <code lang="vbnet">
        Public Shared Function CreateCustomerAdapter(conn As MySqlConnection) As MySqlDataAdapter

        Dim da As MySqlDataAdapter = New MySqlDataAdapter()
        Dim cmd As MySqlCommand
        Dim parm As MySqlParameter

        ' Create the SelectCommand.
        cmd = New MySqlCommand("SELECT * FROM mytable WHERE id=@id AND name=@name", conn)

        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15)
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15)

        da.SelectCommand = cmd

        ' Create the InsertCommand.
        cmd = New MySqlCommand("INSERT INTO mytable (id,name) VALUES (@id, @name)", conn)

        cmd.Parameters.Add( "@id", MySqlDbType.VarChar, 15, "id" )
        cmd.Parameters.Add( "@name", MySqlDbType.VarChar, 15, "name" )
        da.InsertCommand = cmd

        Return da
        End Function
      </code>
      <code lang="C#">
        public static MySqlDataAdapter CreateCustomerAdapter(MySqlConnection conn)
        {
        MySqlDataAdapter da = new MySqlDataAdapter();
        MySqlCommand cmd;
        MySqlParameter parm;

        // Create the SelectCommand.
        cmd = new MySqlCommand("SELECT * FROM mytable WHERE id=@id AND name=@name", conn);

        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15);
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15);

        da.SelectCommand = cmd;

        // Create the InsertCommand.
        cmd = new MySqlCommand("INSERT INTO mytable (id,name) VALUES (@id,@name)", conn);
        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15, "id" );
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15, "name" );

        da.InsertCommand = cmd;

        return da;
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand">
            <summary>
      Gets or sets a SQL statement or stored procedure used to select records in the data source.
    </summary><value>
      A <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> used during <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)"/> to select records from the
      database for placement in the <see cref="T:System.Data.DataSet"/>.
    </value><remarks>
      <para>
        When <B>SelectCommand</B> is assigned to a previously created <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>,
        the <B>MySqlCommand</B> is not cloned. The <B>SelectCommand</B> maintains a reference to the
        previously created <B>MySqlCommand</B> object.
      </para>
      <para>
        If the <B>SelectCommand</B> does not return any rows, no tables are added to the
        <see cref="T:System.Data.DataSet"/>, and no exception is raised.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets the
      <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and <B>InsertCommand</B> properties. It assumes you have already
      created a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
      <code lang="vbnet">
        Public Shared Function CreateCustomerAdapter(conn As MySqlConnection) As MySqlDataAdapter

        Dim da As MySqlDataAdapter = New MySqlDataAdapter()
        Dim cmd As MySqlCommand
        Dim parm As MySqlParameter

        ' Create the SelectCommand.
        cmd = New MySqlCommand("SELECT * FROM mytable WHERE id=@id AND name=@name", conn)

        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15)
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15)

        da.SelectCommand = cmd

        ' Create the InsertCommand.
        cmd = New MySqlCommand("INSERT INTO mytable (id,name) VALUES (@id, @name)", conn)

        cmd.Parameters.Add( "@id", MySqlDbType.VarChar, 15, "id" )
        cmd.Parameters.Add( "@name", MySqlDbType.VarChar, 15, "name" )
        da.InsertCommand = cmd

        Return da
        End Function
      </code>
      <code lang="C#">
        public static MySqlDataAdapter CreateCustomerAdapter(MySqlConnection conn)
        {
        MySqlDataAdapter da = new MySqlDataAdapter();
        MySqlCommand cmd;
        MySqlParameter parm;

        // Create the SelectCommand.
        cmd = new MySqlCommand("SELECT * FROM mytable WHERE id=@id AND name=@name", conn);

        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15);
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15);

        da.SelectCommand = cmd;

        // Create the InsertCommand.
        cmd = new MySqlCommand("INSERT INTO mytable (id,name) VALUES (@id,@name)", conn);
        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15, "id" );
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15, "name" );

        da.InsertCommand = cmd;

        return da;
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlDataAdapter.UpdateCommand">
            <summary>
      Gets or sets a SQL statement or stored procedure used to updated records in the data source.
    </summary><value>
      A <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> used during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/> to update records in the
      database with data from the <see cref="T:System.Data.DataSet"/>.
    </value><remarks>
      <para>
        During <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>, if this property is not set and primary key information
        is present in the <see cref="T:System.Data.DataSet"/>, the <B>UpdateCommand</B> can be generated
        automatically if you set the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> property and use the
        <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/>.  Then, any additional commands that you do not set are
        generated by the <B>MySqlCommandBuilder</B>. This generation logic requires key column
        information to be present in the <B>DataSet</B>.
      </para>
      <para>
        When <B>UpdateCommand</B> is assigned to a previously created <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>,
        the <B>MySqlCommand</B> is not cloned. The <B>UpdateCommand</B> maintains a reference
        to the previously created <B>MySqlCommand</B> object.
      </para>
      <note>
        If execution of this command returns rows, these rows may be merged with the DataSet
        depending on how you set the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.UpdatedRowSource"/> property of the <B>MySqlCommand</B> object.
      </note>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and sets the
      <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> and <B>UpdateCommand</B> properties. It assumes you have already
      created a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object.
      <code lang="vbnet">
        Public Shared Function CreateCustomerAdapter(conn As MySqlConnection) As MySqlDataAdapter

        Dim da As MySqlDataAdapter = New MySqlDataAdapter()
        Dim cmd As MySqlCommand
        Dim parm As MySqlParameter

        ' Create the SelectCommand.
        cmd = New MySqlCommand("SELECT * FROM mytable WHERE id=@id AND name=@name", conn)

        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15)
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15)

        da.SelectCommand = cmd

        ' Create the UpdateCommand.
        cmd = New MySqlCommand("UPDATE mytable SET id=@id, name=@name WHERE id=@oldId", conn)

        cmd.Parameters.Add( "@id", MySqlDbType.VarChar, 15, "id" )
        cmd.Parameters.Add( "@name", MySqlDbType.VarChar, 15, "name" )

        parm = cmd.Parameters.Add("@oldId", MySqlDbType.VarChar, 15, "id")
        parm.SourceVersion = DataRowVersion.Original

        da.UpdateCommand = cmd

        Return da
        End Function
      </code>
      <code lang="C#">
        public static MySqlDataAdapter CreateCustomerAdapter(MySqlConnection conn)
        {
        MySqlDataAdapter da = new MySqlDataAdapter();
        MySqlCommand cmd;
        MySqlParameter parm;

        // Create the SelectCommand.
        cmd = new MySqlCommand("SELECT * FROM mytable WHERE id=@id AND name=@name", conn);

        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15);
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15);

        da.SelectCommand = cmd;

        // Create the UpdateCommand.
        cmd = new MySqlCommand("UPDATE mytable SET id=@id, name=@name WHERE id=@oldId", conn);
        cmd.Parameters.Add("@id", MySqlDbType.VarChar, 15, "id" );
        cmd.Parameters.Add("@name", MySqlDbType.VarChar, 15, "name" );

        parm = cmd.Parameters.Add( "@oldId", MySqlDbType.VarChar, 15, "id" );
        parm.SourceVersion = DataRowVersion.Original;

        da.UpdateCommand = cmd;

        return da;
        }
      </code>
    </example>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlRowUpdatingEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdating"/> event of a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlRowUpdatedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdated"/> event of a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/>.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlRowUpdatingEventArgs">
            <summary>
            Provides data for the RowUpdating event. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Initializes a new instance of the MySqlRowUpdatingEventArgs class.
            </summary>
            <param name="row">The <see cref="T:System.Data.DataRow"/> to 
            <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> to execute during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</param>
            <param name="statementType">One of the <see cref="T:System.Data.StatementType"/> values that specifies the type of query executed.</param>
            <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping"/> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</param>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlRowUpdatingEventArgs.Command">
            <summary>
            Gets or sets the MySqlCommand to execute when performing the Update.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlRowUpdatedEventArgs">
            <summary>
            Provides data for the RowUpdated event. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
            <summary>
            Initializes a new instance of the MySqlRowUpdatedEventArgs class.
            </summary>
            <param name="row">The <see cref="T:System.Data.DataRow"/> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</param>
            <param name="command">The <see cref="T:System.Data.IDbCommand"/> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/> is called.</param>
            <param name="statementType">One of the <see cref="T:System.Data.StatementType"/> values that specifies the type of query executed.</param>
            <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping"/> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)"/>.</param>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlRowUpdatedEventArgs.Command">
            <summary>
            Gets or sets the MySqlCommand executed when Update is called.
            </summary>
        </member>
        <member name="T:MySql.Data.Common.StreamCreator">
            <summary>
            Summary description for StreamCreator.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlCommandBuilder">
            <summary>
      Automatically generates single-table commands used to reconcile changes made to a DataSet with the associated MySQL database. This class cannot be inherited.
    </summary><remarks>
      <para>
        The <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> does not automatically generate the SQL statements required to
        reconcile changes made to a <see cref="T:System.Data.DataSet">DataSet</see> with the associated instance of MySQL.
        However, you can create a <B>MySqlCommandBuilder</B> object to automatically generate SQL statements for
        single-table updates if you set the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand">SelectCommand</see> property
        of the <B>MySqlDataAdapter</B>. Then, any additional SQL statements that you do not set are generated by the
        <B>MySqlCommandBuilder</B>.
      </para>

      <para>
        The <B>MySqlCommandBuilder</B> registers itself as a listener for <see cref="M:MySql.Data.MySqlClient.MySqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">RowUpdating</see>
        events whenever you set the <see cref="P:MySql.Data.MySqlClient.MySqlCommandBuilder.DataAdapter"/> property. You can only associate one
        <B>MySqlDataAdapter</B> or <B>MySqlCommandBuilder</B> object with each other at one time.
      </para>

      <para>
        To generate INSERT, UPDATE, or DELETE statements, the <B>MySqlCommandBuilder</B> uses the
        <B>SelectCommand</B> property to retrieve a required set of metadata automatically. If you change
        the <B>SelectCommand</B> after the metadata has is retrieved (for example, after the first update), you
        should call the <see cref="M:MySql.Data.MySqlClient.MySqlCommandBuilder.RefreshSchema"/> method to update the metadata.
      </para>

      <para>
        The <B>SelectCommand</B> must also return at least one primary key or unique
        column. If none are present, an <I>InvalidOperation</I> exception is generated,
        and the commands are not generated.
      </para>

      <para>
        The <B>MySqlCommandBuilder</B> also uses the <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection">Connection</see>,
        <see cref="P:MySql.Data.MySqlClient.MySqlCommand.CommandTimeout">CommandTimeout</see>, and <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Transaction">Transaction</see>
        properties referenced by the <B>SelectCommand</B>. The user should call
        <B>RefreshSchema</B> if any of these properties are modified, or if the
        <B>SelectCommand</B> itself is replaced. Otherwise the <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.InsertCommand">InsertCommand</see>,
        <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.UpdateCommand">UpdateCommand</see>, and
        <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.DeleteCommand">DeleteCommand</see> properties retain
        their previous values.
      </para>

      <para>
        If you call <i>Dispose</i>, the <B>MySqlCommandBuilder</B> is disassociated
        from the <B>MySqlDataAdapter</B>, and the generated commands are no longer used.
      </para>

      <note>
        Caution must be used when using MySqlCOmmandBuilder on MySql 4.0 systems.  With MySql 4.0,
        database/schema information is not provided to the connector for a query.  This means that
        a query that pulls columns from two identically named tables in two or more different databases
        will not cause an exception to be thrown but will not work correctly.  Even more dangerous
        is the situation where your select statement references database X but is executed in
        database Y and both databases have tables with similar layouts.  This situation can cause
        unwanted changes or deletes.
        This note does not apply to MySQL versions 4.1 and later.
      </note>

    </remarks><example>
      The	following example uses the <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/>, along
      <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> and <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, to
      select rows from a data source. The example is passed an initialized
      <see cref="T:System.Data.DataSet"/>, a connection string, a
      query string that is a SQL SELECT statement, and a string that is the
      name of the database table. The example then creates a <B>MySqlCommandBuilder</B>.

      <code lang="vbnet">
        Public Shared Function SelectRows(myConnection As String, mySelectQuery As String, myTableName As String) As DataSet
        Dim myConn As New MySqlConnection(myConnection)
        Dim myDataAdapter As New MySqlDataAdapter()
        myDataAdapter.SelectCommand = New MySqlCommand(mySelectQuery, myConn)
        Dim cb As SqlCommandBuilder = New MySqlCommandBuilder(myDataAdapter)

        myConn.Open()

        Dim ds As DataSet = New DataSet
        myDataAdapter.Fill(ds, myTableName)

        ' Code to modify data in DataSet here

        ' Without the MySqlCommandBuilder this line would fail.
        myDataAdapter.Update(ds, myTableName)

        myConn.Close()
        End Function 'SelectRows
      </code>
      <code lang="C#">
        public static DataSet SelectRows(string myConnection, string mySelectQuery, string myTableName)
        {
        MySqlConnection myConn = new MySqlConnection(myConnection);
        MySqlDataAdapter myDataAdapter = new MySqlDataAdapter();
        myDataAdapter.SelectCommand = new MySqlCommand(mySelectQuery, myConn);
        MySqlCommandBuilder cb = new MySqlCommandBuilder(myDataAdapter);

        myConn.Open();

        DataSet ds = new DataSet();
        myDataAdapter.Fill(ds, myTableName);

        //code to modify data in DataSet here

        //Without the MySqlCommandBuilder this line would fail
        myDataAdapter.Update(ds, myTableName);

        myConn.Close();

        return ds;
        }

      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.#ctor">
            <summary>
      Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> class.
    </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.#ctor(MySql.Data.MySqlClient.MySqlDataAdapter)">
            <summary>
      Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> class
      with the associated <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> object.
    </summary><param name="adapter">
      The <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> to use.
    </param><remarks>
      <para>
        The <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> registers itself as a listener for
        <see cref="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdating"/> events that are generated by the
        <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> specified in this property.
      </para>
      <para>
        When you create a new instance <B>MySqlCommandBuilder</B>, any existing
        <B>MySqlCommandBuilder</B> associated with this <B>MySqlDataAdapter</B>
        is released.
      </para>
    </remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.DeriveParameters(MySql.Data.MySqlClient.MySqlCommand)">
            <summary>
            Retrieves parameter information from the stored procedure specified 
            in the MySqlCommand and populates the Parameters collection of the 
            specified MySqlCommand object.
            This method is not currently supported since stored procedures are 
            not available in MySql.
            </summary>
            <param name="command">The MySqlCommand referencing the stored 
            procedure from which the parameter information is to be derived. 
            The derived parameters are added to the Parameters collection of the 
            MySqlCommand.</param>
            <exception cref="T:System.InvalidOperationException">The command text is not 
            a valid stored procedure name.</exception>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.GetDeleteCommand">
            <summary>
            Gets the delete command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.GetUpdateCommand">
            <summary>
            Gets the update command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.GetInsertCommand">
            <summary>
            Gets the insert command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.RefreshSchema">
            <summary>
      Refreshes the database schema information used to generate INSERT, UPDATE, or
      DELETE statements.
    </summary><remarks>
      <para>
        An application should call <B>RefreshSchema</B> whenever the SELECT statement
        associated with the <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> changes.
      </para>
      <para>
        An application should call <B>RefreshSchema</B> whenever the
        <see cref="P:MySql.Data.MySqlClient.MySqlDataAdapter.SelectCommand"/> value of the <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> changes.
      </para>
    </remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.GetParameterName(System.String)">
            <summary>
            
            </summary>
            <param name="parameterName"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlCommandBuilder.CreateFinalSelect">
            <summary>
            We only need to return the single auto generated column since the base
            ADO.Net classes will take care of mapping it onto the datarow for us.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommandBuilder.DataAdapter">
            <summary>
      Gets or sets a <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> object for which SQL statements are automatically generated.
    </summary><value>
      A <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> object.
    </value><remarks>
      <para>
        The <see cref="T:MySql.Data.MySqlClient.MySqlCommandBuilder"/> registers itself as a listener for
        <see cref="E:MySql.Data.MySqlClient.MySqlDataAdapter.RowUpdating"/> events that are generated by the
        <see cref="T:MySql.Data.MySqlClient.MySqlDataAdapter"/> specified in this property.
      </para>
      <para>
        When you create a new instance <B>MySqlCommandBuilder</B>, any existing
        <B>MySqlCommandBuilder</B> associated with this <B>MySqlDataAdapter</B>
        is released.
      </para>
    </remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlCommandBuilder.ReturnGeneratedIdentifiers">
            <summary>
            Indicates whether the command builder should generate a SELECT statement
            to populate any autogenerated fields.  We provide this property rather
            than rely on the MySqlCommand.UpdatedRowSource property since a user should
            still be able to write a custom insert command and not have our work interfere.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlScript">
            <summary>
            Provides a class capable of executing a SQL script containing
            multiple SQL statements including CREATE PROCEDURE statements
            that require changing the delimiter
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlScript.#ctor">
            <summary>
            Initializes a new instance of the 
            <see cref="T:MySql.Data.MySqlClient.MySqlScript"/> class.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlScript.#ctor(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:MySql.Data.MySqlClient.MySqlScript"/> class.
            </summary>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlScript.#ctor(System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:MySql.Data.MySqlClient.MySqlScript"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlScript.#ctor(MySql.Data.MySqlClient.MySqlConnection,System.String)">
            <summary>
            Initializes a new instance of the 
            <see cref="T:MySql.Data.MySqlClient.MySqlScript"/> class.
            </summary>
            <param name="connection">The connection.</param>
            <param name="query">The query.</param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlScript.Execute">
            <summary>
            Executes this instance.
            </summary>
            <returns>The number of statements executed as part of the script.</returns>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlScript.Connection">
            <summary>
            Gets or sets the connection.
            </summary>
            <value>The connection.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlScript.Query">
            <summary>
            Gets or sets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlScript.Delimiter">
            <summary>
            Gets or sets the delimiter.
            </summary>
            <value>The delimiter.</value>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlStatementExecutedEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlScriptErrorEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlScriptEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlScriptEventArgs.StatementText">
            <summary>
            Gets the statement text.
            </summary>
            <value>The statement text.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlScriptEventArgs.Line">
            <summary>
            Gets the line.
            </summary>
            <value>The line.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlScriptEventArgs.Position">
            <summary>
            Gets the position.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlScriptErrorEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlScriptErrorEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlScriptErrorEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlScriptErrorEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>The exception.</value>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlScriptErrorEventArgs.Ignore">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:MySql.Data.MySqlClient.MySqlScriptErrorEventArgs"/> is ignore.
            </summary>
            <value><c>true</c> if ignore; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlTransaction">
            <summary>
      Represents a SQL transaction to be made in a MySQL database. This class cannot be inherited.
    </summary><remarks>
      The application creates a <B>MySqlTransaction</B> object by calling <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/>
      on the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object. All subsequent operations associated with the
      transaction (for example, committing or aborting the transaction), are performed on the
      <B>MySqlTransaction</B> object.
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and a <B>MySqlTransaction</B>.
      It also demonstrates how to use the <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/>,
      <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/>, and <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback"/> methods.
      <code lang="vbnet">
        Public Sub RunTransaction(myConnString As String)
        Dim myConnection As New MySqlConnection(myConnString)
        myConnection.Open()

        Dim myCommand As MySqlCommand = myConnection.CreateCommand()
        Dim myTrans As MySqlTransaction

        ' Start a local transaction
        myTrans = myConnection.BeginTransaction()
        ' Must assign both transaction object and connection
        ' to Command object for a pending local transaction
        myCommand.Connection = myConnection
        myCommand.Transaction = myTrans

        Try
        myCommand.CommandText = "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')"
        myCommand.ExecuteNonQuery()
        myCommand.CommandText = "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')"
        myCommand.ExecuteNonQuery()
        myTrans.Commit()
        Console.WriteLine("Both records are written to database.")
        Catch e As Exception
        Try
        myTrans.Rollback()
        Catch ex As MySqlException
        If Not myTrans.Connection Is Nothing Then
        Console.WriteLine("An exception of type " &amp; ex.GetType().ToString() &amp; _
        " was encountered while attempting to roll back the transaction.")
        End If
        End Try

        Console.WriteLine("An exception of type " &amp; e.GetType().ToString() &amp; _
        "was encountered while inserting the data.")
        Console.WriteLine("Neither record was written to database.")
        Finally
        myConnection.Close()
        End Try
        End Sub 'RunTransaction
      </code>
      <code lang="C#">
        public void RunTransaction(string myConnString)
        {
        MySqlConnection myConnection = new MySqlConnection(myConnString);
        myConnection.Open();

        MySqlCommand myCommand = myConnection.CreateCommand();
        MySqlTransaction myTrans;

        // Start a local transaction
        myTrans = myConnection.BeginTransaction();
        // Must assign both transaction object and connection
        // to Command object for a pending local transaction
        myCommand.Connection = myConnection;
        myCommand.Transaction = myTrans;

        try
        {
        myCommand.CommandText = "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
        myCommand.ExecuteNonQuery();
        myCommand.CommandText = "Insert into Region (RegionID, RegionDescription) VALUES (101, 'Description')";
        myCommand.ExecuteNonQuery();
        myTrans.Commit();
        Console.WriteLine("Both records are written to database.");
        }
        catch(Exception e)
        {
        try
        {
        myTrans.Rollback();
        }
        catch (MySqlException ex)
        {
        if (myTrans.Connection != null)
        {
        Console.WriteLine("An exception of type " + ex.GetType() +
        " was encountered while attempting to roll back the transaction.");
        }
        }

        Console.WriteLine("An exception of type " + e.GetType() +
        " was encountered while inserting the data.");
        Console.WriteLine("Neither record was written to database.");
        }
        finally
        {
        myConnection.Close();
        }
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlTransaction.Commit">
            <summary>
      Commits the database transaction.
    </summary><remarks>
      The <b>Commit</b> method is equivalent to the MySQL SQL statement
      COMMIT.
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and a
      <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>. It also demonstrates how to use the
      <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/>, <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/>, and <B>Rollback</B>
      methods.
      <code lang="vbnet">
        Public Sub RunSqlTransaction(myConnString As String)
        Dim myConnection As New MySqlConnection(myConnString)
        myConnection.Open()

        Dim myCommand As MySqlCommand = myConnection.CreateCommand()
        Dim myTrans As MySqlTransaction

        ' Start a local transaction
        myTrans = myConnection.BeginTransaction()

        ' Must assign both transaction object and connection
        ' to Command object for a pending local transaction
        myCommand.Connection = myConnection
        myCommand.Transaction = myTrans

        Try
        myCommand.CommandText = "Insert into mytable (id, desc) VALUES (100, 'Description')"
        myCommand.ExecuteNonQuery()
        myCommand.CommandText = "Insert into mytable (id, desc) VALUES (101, 'Description')"
        myCommand.ExecuteNonQuery()
        myTrans.Commit()
        Console.WriteLine("Success.")
        Catch e As Exception
        Try
        myTrans.Rollback()
        Catch ex As MySqlException
        If Not myTrans.Connection Is Nothing Then
        Console.WriteLine("An exception of type " &amp; ex.GetType().ToString() &amp; _
        " was encountered while attempting to roll back the transaction.")
        End If
        End Try

        Console.WriteLine("An exception of type " &amp; e.GetType().ToString() &amp; _
        "was encountered while inserting the data.")
        Console.WriteLine("Neither record was written to database.")
        Finally
        myConnection.Close()
        End Try
        End Sub
      </code>
      <code lang="C#">
        public void RunSqlTransaction(string myConnString)
        {
        MySqlConnection myConnection = new MySqlConnection(myConnString);
        myConnection.Open();

        MySqlCommand myCommand = myConnection.CreateCommand();
        MySqlTransaction myTrans;

        // Start a local transaction
        myTrans = myConnection.BeginTransaction();
        // Must assign both transaction object and connection
        // to Command object for a pending local transaction
        myCommand.Connection = myConnection;
        myCommand.Transaction = myTrans;

        try
        {
        myCommand.CommandText = "Insert into mytable (id, desc) VALUES (100, 'Description')";
        myCommand.ExecuteNonQuery();
        myCommand.CommandText = "Insert into mytable (id, desc) VALUES (101, 'Description')";
        myCommand.ExecuteNonQuery();
        myTrans.Commit();
        Console.WriteLine("Both records are written to database.");
        }
        catch(Exception e)
        {
        try
        {
        myTrans.Rollback();
        }
        catch (MySqlException ex)
        {
        if (myTrans.Connection != null)
        {
        Console.WriteLine("An exception of type " + ex.GetType() +
        " was encountered while attempting to roll back the transaction.");
        }
        }

        Console.WriteLine("An exception of type " + e.GetType() +
        " was encountered while inserting the data.");
        Console.WriteLine("Neither record was written to database.");
        }
        finally
        {
        myConnection.Close();
        }
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback">
            <summary>
      Rolls back a transaction from a pending state.
    </summary><remarks>
      The Rollback method is equivalent to the MySQL statement ROLLBACK.
      The transaction can only be rolled back from a pending state
      (after BeginTransaction has been called, but before Commit is
      called).
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and a
      <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>. It also demonstrates how to use the
      <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/>, <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/>, and <B>Rollback</B>
      methods.
      <code lang="vbnet">
        Public Sub RunSqlTransaction(myConnString As String)
        Dim myConnection As New MySqlConnection(myConnString)
        myConnection.Open()

        Dim myCommand As MySqlCommand = myConnection.CreateCommand()
        Dim myTrans As MySqlTransaction

        ' Start a local transaction
        myTrans = myConnection.BeginTransaction()

        ' Must assign both transaction object and connection
        ' to Command object for a pending local transaction
        myCommand.Connection = myConnection
        myCommand.Transaction = myTrans

        Try
        myCommand.CommandText = "Insert into mytable (id, desc) VALUES (100, 'Description')"
        myCommand.ExecuteNonQuery()
        myCommand.CommandText = "Insert into mytable (id, desc) VALUES (101, 'Description')"
        myCommand.ExecuteNonQuery()
        myTrans.Commit()
        Console.WriteLine("Success.")
        Catch e As Exception
        Try
        myTrans.Rollback()
        Catch ex As MySqlException
        If Not myTrans.Connection Is Nothing Then
        Console.WriteLine("An exception of type " &amp; ex.GetType().ToString() &amp; _
        " was encountered while attempting to roll back the transaction.")
        End If
        End Try

        Console.WriteLine("An exception of type " &amp; e.GetType().ToString() &amp; _
        "was encountered while inserting the data.")
        Console.WriteLine("Neither record was written to database.")
        Finally
        myConnection.Close()
        End Try
        End Sub
      </code>
      <code lang="C#">
        public void RunSqlTransaction(string myConnString)
        {
        MySqlConnection myConnection = new MySqlConnection(myConnString);
        myConnection.Open();

        MySqlCommand myCommand = myConnection.CreateCommand();
        MySqlTransaction myTrans;

        // Start a local transaction
        myTrans = myConnection.BeginTransaction();
        // Must assign both transaction object and connection
        // to Command object for a pending local transaction
        myCommand.Connection = myConnection;
        myCommand.Transaction = myTrans;

        try
        {
        myCommand.CommandText = "Insert into mytable (id, desc) VALUES (100, 'Description')";
        myCommand.ExecuteNonQuery();
        myCommand.CommandText = "Insert into mytable (id, desc) VALUES (101, 'Description')";
        myCommand.ExecuteNonQuery();
        myTrans.Commit();
        Console.WriteLine("Both records are written to database.");
        }
        catch(Exception e)
        {
        try
        {
        myTrans.Rollback();
        }
        catch (MySqlException ex)
        {
        if (myTrans.Connection != null)
        {
        Console.WriteLine("An exception of type " + ex.GetType() +
        " was encountered while attempting to roll back the transaction.");
        }
        }

        Console.WriteLine("An exception of type " + e.GetType() +
        " was encountered while inserting the data.");
        Console.WriteLine("Neither record was written to database.");
        }
        finally
        {
        myConnection.Close();
        }
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlTransaction.Connection">
            <summary>
            Gets the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object associated with the transaction, or a null reference (Nothing in Visual Basic) if the transaction is no longer valid.
            </summary>
            <value>The <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> object associated with this transaction.</value>
            <remarks>
            A single application may have multiple database connections, each 
            with zero or more transactions. This property enables you to 
            determine the connection object associated with a particular 
            transaction created by <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/>.
            </remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlTransaction.IsolationLevel">
            <summary>
            Specifies the <see cref="P:MySql.Data.MySqlClient.MySqlTransaction.IsolationLevel"/> for this transaction.
            </summary>
            <value>
            The <see cref="P:MySql.Data.MySqlClient.MySqlTransaction.IsolationLevel"/> for this transaction. The default is <b>ReadCommitted</b>.
            </value>
            <remarks>
            Parallel transactions are not supported. Therefore, the IsolationLevel 
            applies to the entire transaction.
            </remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.ISSchemaProvider.GetProcedures(System.String[])">
            <summary>
            Return schema information about procedures and functions
            Restrictions supported are:
            schema, name, type
            </summary>
            <param name="restrictions"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.ISSchemaProvider.GetProcedureParameters(System.String[],System.Data.DataTable)">
            <summary>
            Return schema information about parameters for procedures and functions
            Restrictions supported are:
            schema, name, type, parameter name
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.ISSchemaProvider.InitParameterRow(System.Data.DataRow,System.Data.DataRow)">
            <summary>
            Initializes a new row for the procedure parameters table.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.ISSchemaProvider.ParseDataType(System.Data.DataRow,MySql.Data.Common.SqlTokenizer)">
            <summary>
             Parses out the elements of a procedure parameter data type.
            </summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlBit">
            <summary>
            Summary description for MySqlUInt64.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.PreparableStatement">
            <summary>
            Summary description for PreparedStatement.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.Statement.SerializeParameter(MySql.Data.MySqlClient.MySqlParameterCollection,MySql.Data.MySqlClient.MySqlStream,System.String)">
            <summary>
            Serializes the given parameter to the given memory stream
            </summary>
            <remarks>
            <para>This method is called by PrepareSqlBuffers to convert the given
            parameter to bytes and write those bytes to the given memory stream.
            </para>
            </remarks>
            <returns>True if the parameter was successfully serialized, false otherwise.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.Statement.TokenizeSql2(System.String)">
            <summary>
            THis code is not used yet but will likely be used in the future.
            </summary>
            <param name="sql"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.Statement.TokenizeSql(System.String)">
            <summary>
            Breaks the given SQL up into 'tokens' that are easier to output
            into another form (bytes, preparedText, etc).
            </summary>
            <param name="sql">SQL to be tokenized</param>
            <returns>Array of tokens</returns>
            <remarks>The SQL is tokenized at parameter markers ('?') and at 
            (';') sql end markers if the server doesn't support batching.
            </remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.PreparableStatement.PrepareCommandText(System.String@)">
            <summary>
            Prepares CommandText for use with the Prepare method
            </summary>
            <returns>Command text stripped of all paramter names</returns>
            <remarks>
            Takes the output of TokenizeSql and creates a single string of SQL
            that only contains '?' markers for each parameter.  It also creates
            the parameterMap array list that includes all the paramter names in the
            order they appeared in the SQL
            </remarks>
        </member>
        <member name="T:MySql.Data.MySqlClient.NativeDriver">
            <summary>
            Summary description for Driver.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.ExecuteCommand(MySql.Data.MySqlClient.DBCmd,System.Byte[],System.Int32)">
            <summary>
            ExecuteCommand does the work of writing the actual command bytes to the writer
            We break it out into a function since it is used in several places besides query
            </summary>
            <param name="cmd">The cmd that we are sending</param>
            <param name="bytes">The bytes of the command, can be null</param>
            <param name="length">The number of bytes to send</param>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.SetDatabase(System.String)">
            <summary>
            Sets the current database for the this connection
            </summary>
            <param name="dbName"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.SetConnectionFlags">
            <summary>
            Return the appropriate set of connection flags for our
            server capabilities and our user requested options.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.Authenticate411">
            <summary>
            Perform an authentication against a 4.1.1 server
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.Query(System.Byte[],System.Int32)">
            <summary>
            Query is the method that is called to send all queries to the server
            </summary>
            <param name="bytes">The query to send</param>
            <param name="length">The length of the query to send</param>
            <returns>
            -1 for non select queries
            >= 0 for select queries
            </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.ReadResult(System.UInt64@,System.Int64@)">
            <summary>
            ReadResult will attempt to read a single result from the server.  Note that it is not 
            reading all the rows of the result set but simple determining what type of result it is
            and returning values appropriately.
            </summary>
            <param name="affectedRows">Set to the number of rows affected in this result, 0 for selects</param>
            <param name="lastInsertId">Set to the id of the row inserted by this result, 0 for non-inserts</param>
            <returns>Number of columns in the resultset, 0 for non-selects, -1 for no more resultsets</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.SendFileToServer(System.String)">
            <summary>
            Sends the specified file to the server. 
            This supports the LOAD DATA LOCAL INFILE
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:MySql.Data.MySqlClient.NativeDriver.FetchDataRow(System.Int32,System.Int32,System.Int32)">
            <summary>
            FetchDataRow is the method that the data reader calls to see if there is another 
            row to fetch.  In the non-prepared mode, it will simply read the next data packet.
            In the prepared mode (statementId > 0), it will 
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.NativeDriver.SupportsBatch">
            <summary>
            Returns true if this connection can handle batch SQL natively
            This means MySQL 4.1.1 or later.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlError">
            <summary>
            Collection of error codes that can be returned by the server
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlError.#ctor(System.String,System.Int32,System.String)">
            <summary></summary>
            <param name="level"></param>
            <param name="code"></param>
            <param name="message"></param>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlError.Level">
            <summary>
            Error level
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlError.Code">
            <summary>
            Error code
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlError.Message">
            <summary>
            Error message
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlErrorCode">
            <summary>
            Provides a reference to error codes returned by MySQL.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.DuplicateKey">
            <summary>
            There is already a key with the given values.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.KeyNotFound">
            <summary>
            The specified key was not found.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.UnableToConnectToHost">
            <summary>
            Given when the connection is unable to successfully connect to host.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.AccessDenied">
            <summary>
            Normally returned when an incorrect password is given
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.DuplicateKeyName">
            <summary>
            Duplicate Key Name
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.DuplicateKeyEntry">
            <summary>
            Duplicate Key Entry
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.HostNotPrivileged">
            <summary>
            The given host is not allowed to connect
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.AnonymousUser">
            <summary>
            The anonymous user is not allowed to connect
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.PasswordNotAllowed">
            <summary>
            The given password is not allowed
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.PasswordNoMatch">
            <summary>
            The given password does not match
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlErrorCode.PacketTooLarge">
            <summary>
            An attempt was made to send or receive a packet larger than
            max_allowed_packet_size
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlException">
            <summary>
            The exception that is thrown when MySQL returns an error. This class cannot be inherited.
            </summary>
            <remarks>
      <para>
        This class is created whenever the MySql Data Provider encounters an error generated from the server.
      </para>
      <para>
        Any open connections are not automatically closed when an exception is thrown.  If
        the client application determines that the exception is fatal, it should close any open
        <see cref="T:MySql.Data.MySqlClient.MySqlDataReader"/> objects or <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> objects.
      </para>
    </remarks><example>
      The following example generates a <B>MySqlException</B> due to a missing server,
      and then displays the exception.

      <code lang="vbnet">
        Public Sub ShowException()
        Dim mySelectQuery As String = "SELECT column1 FROM table1"
        Dim myConnection As New MySqlConnection ("Data Source=localhost;Database=Sample;")
        Dim myCommand As New MySqlCommand(mySelectQuery, myConnection)

        Try
        myCommand.Connection.Open()
        Catch e As MySqlException
        MessageBox.Show( e.Message )
        End Try
        End Sub
      </code>
      <code lang="C#">
        public void ShowException()
        {
        string mySelectQuery = "SELECT column1 FROM table1";
        MySqlConnection myConnection =
        new MySqlConnection("Data Source=localhost;Database=Sample;");
        MySqlCommand myCommand = new MySqlCommand(mySelectQuery,myConnection);

        try
        {
        myCommand.Connection.Open();
        }
        catch (MySqlException e)
        {
        MessageBox.Show( e.Message );
        }
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlException.Number">
            <summary>
            Gets a number that identifies the type of error.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlException.IsFatal">
            <summary>
            True if this exception was fatal and cause the closing of the connection, false otherwise.
            </summary>
        </member>
        <member name="P:zlib.ZInputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:zlib.ZInputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="T:MySql.Data.Types.MySqlConversionException">
            <summary>
            Summary description for MySqlConversionException.
            </summary>
        </member>
        <member name="M:MySql.Data.Types.MySqlConversionException.#ctor(System.String)">
            <summary>Ctor</summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.StoredProcedure">
            <summary>
            Summary description for StoredProcedure.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.Crypt">
            <summary>
            Summary description for Crypt.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.XorScramble(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>
            Simple XOR scramble
            </summary>
            <param name="from">Source array</param>
            <param name="fromIndex">Index inside source array</param>
            <param name="to">Destination array</param>
            <param name="toIndex">Index inside destination array</param>
            <param name="password">Password used to xor the bits</param>
            <param name="length">Number of bytes to scramble</param>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.Get410Password(System.String,System.Byte[])">
            <summary>
            Generate a scrambled password for 4.1.0 using new passwords
            </summary>
            <param name="password">The password to scramble</param>
            <param name="seedBytes">The seedbytes used to scramble</param>
            <returns>Array of bytes containing the scrambled password</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.GetOld410Password(System.String,System.Byte[])">
            <summary>
            Generates a proper hash for old style 4.1.0 passwords.  This would be used
            if a 4.1.0 server contained old 16 byte hashes.
            </summary>
            <param name="password">The password to hash</param>
            <param name="seedBytes">Seed bytes received from the server</param>
            <returns>Byte array containing the password hash</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.Get411Password(System.String,System.String)">
            <summary>
            Returns a byte array containing the proper encryption of the 
            given password/seed according to the new 4.1.1 authentication scheme.
            </summary>
            <param name="password"></param>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.EncryptPassword(System.String,System.String,System.Boolean)">
            <summary>
            Encrypts a password using the MySql encryption scheme
            </summary>
            <param name="password">The password to encrypt</param>
            <param name="seed">The encryption seed the server gave us</param>
            <param name="new_ver">Indicates if we should use the old or new encryption scheme</param>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.Crypt.Hash(System.String)">
            <summary>
            Hashes a password using the algorithm from Monty's code.
            The first element in the return is the result of the "old" hash.
            The second element is the rest of the "new" hash.
            </summary>
            <param name="P">Password to be hashed</param>
            <returns>Two element array containing the hashed values</returns>
        </member>
        <member name="T:MySql.Data.Common.NamedPipeStream">
            <summary>
            Summary description for API.
            </summary>
        </member>
        <member name="P:zlib.ZOutputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:zlib.ZOutputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlConnection">
            <summary>
      Represents an open connection to a MySQL Server database. This class cannot be inherited.
    </summary><remarks>
      <para>
        A <b>MySqlConnection</b> object represents a session to a MySQL Server
        data source.  When you create an instance of <B>MySqlConnection</B>, all
        properties are set to their initial values. For a list of these values, see the
        <B>MySqlConnection</B> constructor.
      </para>

      <para>
        If the <B>MySqlConnection</B> goes out of scope, it is not closed. Therefore,
        you must explicitly close the connection by calling <see cref="M:MySql.Data.MySqlClient.MySqlConnection.Close"/>
        or <see cref="M:MySql.Data.MySqlClient.MySqlConnection.Dispose(System.Boolean)"/>.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> and
      a <B>MySqlConnection</B>. The <B>MySqlConnection</B> is opened and set as the
      <see cref="P:MySql.Data.MySqlClient.MySqlCommand.Connection"/> for the <B>MySqlCommand</B>. The example then calls
      <see cref="M:MySql.Data.MySqlClient.MySqlCommand.ExecuteNonQuery"/>, and closes the connection. To accomplish this, the <B>ExecuteNonQuery</B> is
      passed a connection string and a query string that is a SQL INSERT
      statement.
      <code lang="vbnet">
        <c>
          Public Sub InsertRow(myConnectionString As String)
          ' If the connection string is null, use a default.
          If myConnectionString = "" Then
          myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass"
          End If
          Dim myConnection As New MySqlConnection(myConnectionString)
          Dim myInsertQuery As String = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)"
          Dim myCommand As New MySqlCommand(myInsertQuery)
          myCommand.Connection = myConnection
          myConnection.Open()
          myCommand.ExecuteNonQuery()
          myCommand.Connection.Close()
          End Sub
        </c>
      </code>
      <code lang="C#">
        <c>
          public void InsertRow(string myConnectionString)
          {
          // If the connection string is null, use a default.
          if(myConnectionString == "")
          {
          myConnectionString = "Database=Test;Data Source=localhost;User Id=username;Password=pass";
          }
          MySqlConnection myConnection = new MySqlConnection(myConnectionString);
          string myInsertQuery = "INSERT INTO Orders (id, customerId, amount) Values(1001, 23, 30.66)";
          MySqlCommand myCommand = new MySqlCommand(myInsertQuery);
          myCommand.Connection = myConnection;
          myConnection.Open();
          myCommand.ExecuteNonQuery();
          myCommand.Connection.Close();
          }
        </c>
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.#ctor">
            <summary>
      Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> class.
    </summary><remarks>
      When a new instance of <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is created, the read/write
      properties are set to the following initial values unless they are specifically
      set using their associated keywords in the <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> property.
      <para/>
      <list type="table">
        <listheader>
          <term>Properties</term>
          <term>Initial Value</term>
        </listheader>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/>
          </term>
          <term>empty string ("")</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionTimeout"/>
          </term>
          <term>15</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlConnection.Database"/>
          </term>
          <term>empty string ("")</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlConnection.DataSource"/>
          </term>
          <term>empty string ("")</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ServerVersion"/>
          </term>
          <term>empty string ("")</term>
        </item>
      </list>
      <para/>
      You can change the value for these properties only by using the <B>ConnectionString</B> property.
    </remarks><example>
    </example><overloads>
      <summary>
        Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> class.
      </summary>
    </overloads>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.#ctor(System.String)">
            <summary>
      Initializes a new instance of the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> class when given a string containing the connection string.
    </summary><remarks>
      When a new instance of <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> is created, the read/write
      properties are set to the following initial values unless they are specifically
      set using their associated keywords in the <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> property.
      <para/>
      <list type="table">
        <listheader>
          <term>Properties</term>
          <term>Initial Value</term>
        </listheader>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/>
          </term>
          <term>empty string ("")</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionTimeout"/>
          </term>
          <term>15</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlConnection.Database"/>
          </term>
          <term>empty string ("")</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlConnection.DataSource"/>
          </term>
          <term>empty string ("")</term>
        </item>
        <item>
          <term>
            <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ServerVersion"/>
          </term>
          <term>empty string ("")</term>
        </item>
      </list>
      <para/>
      You can change the value for these properties only by using the <B>ConnectionString</B> property.
    </remarks><example>
    </example><param name="connectionString">The connection properties used to open the MySQL database. </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
            Enlists in the specified transaction. 
            </summary>
            <param name="transaction">
            A reference to an existing <see cref="T:System.Transactions.Transaction"/> in which to enlist.
            </param>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction">
            <summary>Begins a database transaction.</summary><returns>An object representing the new transaction.</returns><exception cref="T:System.InvalidOperationException">Parallel transactions are not supported.</exception><remarks>
      <para>This command is equivalent to the MySQL BEGIN TRANSACTION command.</para>
      <para>
        You must explicitly commit or roll back the transaction using the <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/> or
        <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback"/> method.
        <note>
          If you do not specify an isolation level, the default isolation level is used. To specify an isolation
          level with the <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/> method, use the overload that takes the <I>iso</I> parameter.  Also
          note that any attempt to begin a transaction while a transaction is in progress will throw an exception on MySQL 4.1 and higher.
          On MySQL 4.0, an exception will not be thrown because servers 4.0 and earlier did not report their transacation status.
        </note>
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and a
      <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>.  It also demonstrates how to use the <B>BeginTransaction</B>, a
      <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/>, and <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback"/> methods.
      <code lang="vbnet">
        Public Sub RunTransaction(myConnString As String)
        Dim myConnection As New MySqlConnection(myConnString)
        myConnection.Open()

        Dim myCommand As MySqlCommand = myConnection.CreateCommand()
        Dim myTrans As MySqlTransaction

        ' Start a local transaction
        myTrans = myConnection.BeginTransaction()
        ' Must assign both transaction object and connection
        ' to Command object for a pending local transaction
        myCommand.Connection = myConnection
        myCommand.Transaction = myTrans

        Try
        myCommand.CommandText = "Insert into Test (id, desc) VALUES (100, 'Description')"
        myCommand.ExecuteNonQuery()
        myCommand.CommandText = "Insert into Test (id, desc) VALUES (101, 'Description')"
        myCommand.ExecuteNonQuery()
        myTrans.Commit()
        Console.WriteLine("Both records are written to database.")
        Catch e As Exception
        Try
        myTrans.Rollback()
        Catch ex As MySqlException
        If Not myTrans.Connection Is Nothing Then
        Console.WriteLine("An exception of type " + ex.GetType().ToString() + _
        " was encountered while attempting to roll back the transaction.")
        End If
        End Try

        Console.WriteLine("An exception of type " + e.GetType().ToString() + _
        "was encountered while inserting the data.")
        Console.WriteLine("Neither record was written to database.")
        Finally
        myConnection.Close()
        End Try
        End Sub
      </code>
      <code lang="C#">
        public void RunTransaction(string myConnString)
        {
        MySqlConnection myConnection = new MySqlConnection(myConnString);
        myConnection.Open();

        MySqlCommand myCommand = myConnection.CreateCommand();
        MySqlTransaction myTrans;

        // Start a local transaction
        myTrans = myConnection.BeginTransaction();
        // Must assign both transaction object and connection
        // to Command object for a pending local transaction
        myCommand.Connection = myConnection;
        myCommand.Transaction = myTrans;

        try
        {
        myCommand.CommandText = "insert into Test (id, desc) VALUES (100, 'Description')";
        myCommand.ExecuteNonQuery();
        myCommand.CommandText = "insert into Test (id, desc) VALUES (101, 'Description')";
        myCommand.ExecuteNonQuery();
        myTrans.Commit();
        Console.WriteLine("Both records are written to database.");
        }
        catch(Exception e)
        {
        try
        {
        myTrans.Rollback();
        }
        catch (SqlException ex)
        {
        if (myTrans.Connection != null)
        {
        Console.WriteLine("An exception of type " + ex.GetType() +
        " was encountered while attempting to roll back the transaction.");
        }
        }

        Console.WriteLine("An exception of type " + e.GetType() +
        " was encountered while inserting the data.");
        Console.WriteLine("Neither record was written to database.");
        }
        finally
        {
        myConnection.Close();
        }
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>Begins a database transaction with the specified isolation level.</summary><param name="iso">The isolation level under which the transaction should run. </param><returns>An object representing the new transaction.</returns><exception cref="T:System.InvalidOperationException">Parallel exceptions are not supported.</exception><remarks>
      <para>This command is equivalent to the MySQL BEGIN TRANSACTION command.</para>
      <para>
        You must explicitly commit or roll back the transaction using the <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/> or
        <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback"/> method.
        <note>
          If you do not specify an isolation level, the default isolation level is used. To specify an isolation
          level with the <see cref="M:MySql.Data.MySqlClient.MySqlConnection.BeginTransaction"/> method, use the overload that takes the <I>iso</I> parameter.
          Also note that any attempt to begin a transaction while a transaction is in progress will throw an exception on MySQL 4.1 and higher.
          On MySQL 4.0, an exception will not be thrown because servers 4.0 and earlier did not report their transacation status.
        </note>
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and a
      <see cref="T:MySql.Data.MySqlClient.MySqlTransaction"/>.  It also demonstrates how to use the <B>BeginTransaction</B>, a
      <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Commit"/>, and <see cref="M:MySql.Data.MySqlClient.MySqlTransaction.Rollback"/> methods.
      <code lang="vbnet">
        Public Sub RunTransaction(myConnString As String)
        Dim myConnection As New MySqlConnection(myConnString)
        myConnection.Open()

        Dim myCommand As MySqlCommand = myConnection.CreateCommand()
        Dim myTrans As MySqlTransaction

        ' Start a local transaction
        myTrans = myConnection.BeginTransaction()
        ' Must assign both transaction object and connection
        ' to Command object for a pending local transaction
        myCommand.Connection = myConnection
        myCommand.Transaction = myTrans

        Try
        myCommand.CommandText = "Insert into Test (id, desc) VALUES (100, 'Description')"
        myCommand.ExecuteNonQuery()
        myCommand.CommandText = "Insert into Test (id, desc) VALUES (101, 'Description')"
        myCommand.ExecuteNonQuery()
        myTrans.Commit()
        Console.WriteLine("Both records are written to database.")
        Catch e As Exception
        Try
        myTrans.Rollback()
        Catch ex As MySqlException
        If Not myTrans.Connection Is Nothing Then
        Console.WriteLine("An exception of type " + ex.GetType().ToString() + _
        " was encountered while attempting to roll back the transaction.")
        End If
        End Try

        Console.WriteLine("An exception of type " + e.GetType().ToString() + _
        "was encountered while inserting the data.")
        Console.WriteLine("Neither record was written to database.")
        Finally
        myConnection.Close()
        End Try
        End Sub
      </code>
      <code lang="C#">
        public void RunTransaction(string myConnString)
        {
        MySqlConnection myConnection = new MySqlConnection(myConnString);
        myConnection.Open();

        MySqlCommand myCommand = myConnection.CreateCommand();
        MySqlTransaction myTrans;

        // Start a local transaction
        myTrans = myConnection.BeginTransaction();
        // Must assign both transaction object and connection
        // to Command object for a pending local transaction
        myCommand.Connection = myConnection;
        myCommand.Transaction = myTrans;

        try
        {
        myCommand.CommandText = "insert into Test (id, desc) VALUES (100, 'Description')";
        myCommand.ExecuteNonQuery();
        myCommand.CommandText = "insert into Test (id, desc) VALUES (101, 'Description')";
        myCommand.ExecuteNonQuery();
        myTrans.Commit();
        Console.WriteLine("Both records are written to database.");
        }
        catch(Exception e)
        {
        try
        {
        myTrans.Rollback();
        }
        catch (SqlException ex)
        {
        if (myTrans.Connection != null)
        {
        Console.WriteLine("An exception of type " + ex.GetType() +
        " was encountered while attempting to roll back the transaction.");
        }
        }

        Console.WriteLine("An exception of type " + e.GetType() +
        " was encountered while inserting the data.");
        Console.WriteLine("Neither record was written to database.");
        }
        finally
        {
        myConnection.Close();
        }
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.ChangeDatabase(System.String)">
            <summary>Changes the current database for an open MySqlConnection.</summary><param name="databaseName">The name of the database to use.</param><remarks>
      <para>
        The value supplied in the <I>database</I> parameter must be a valid database
        name. The <I>database</I> parameter cannot contain a null value, an empty
        string, or a string with only blank characters.
      </para>

      <para>
        When you are using connection pooling against MySQL, and you close
        the connection, it is returned to the connection pool. The next time the
        connection is retrieved from the pool, the reset connection request
        executes before the user performs any operations.
      </para>
    </remarks><exception cref="T:System.ArgumentException">The database name is not valid.</exception><exception cref="T:System.InvalidOperationException">The connection is not open.</exception><exception cref="T:MySql.Data.MySqlClient.MySqlException">Cannot change the database.</exception><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and displays
      some of its read-only properties.

      <code lang="vbnet">
        Public Sub CreateMySqlConnection()
        Dim myConnString As String = _
        "Persist Security Info=False;database=test;server=localhost;user id=joeuser;pwd=pass"
        Dim myConnection As New MySqlConnection( myConnString )
        myConnection.Open()
        MessageBox.Show( "Server Version: " + myConnection.ServerVersion _
        + ControlChars.NewLine + "Database: " + myConnection.Database )
        myConnection.ChangeDatabase( "test2" )
        MessageBox.Show( "ServerVersion: " + myConnection.ServerVersion _
        + ControlChars.NewLine + "Database: " + myConnection.Database )
        myConnection.Close()
        End Sub
      </code>

      <code lang="C#">
        public void CreateMySqlConnection()
        {
        string myConnString =
        "Persist Security Info=False;database=test;server=localhost;user id=joeuser;pwd=pass";
        MySqlConnection myConnection = new MySqlConnection( myConnString );
        myConnection.Open();
        MessageBox.Show( "Server Version: " + myConnection.ServerVersion
        + "\nDatabase: " + myConnection.Database );
        myConnection.ChangeDatabase( "test2" );
        MessageBox.Show( "ServerVersion: " + myConnection.ServerVersion
        + "\nDatabase: " + myConnection.Database );
        myConnection.Close();
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.Ping">
            <summary>
            Ping
            </summary>
            <returns></returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.Open">
            <summary>Opens a database connection with the property settings specified by the ConnectionString.</summary><exception cref="T:System.InvalidOperationException">Cannot open a connection without specifying a data source or server.</exception><exception cref="T:MySql.Data.MySqlClient.MySqlException">A connection-level error occurred while opening the connection.</exception><remarks>
      <para>
        The <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> draws an open connection from the connection pool if one is available.
        Otherwise, it establishes a new connection to an instance of MySQL.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, opens it,
      displays some of its properties, then closes the connection.

      <code lang="vbnet">
        Public Sub CreateMySqlConnection(myConnString As String)
        Dim myConnection As New MySqlConnection(myConnString)
        myConnection.Open()
        MessageBox.Show("ServerVersion: " + myConnection.ServerVersion _
        + ControlChars.Cr + "State: " + myConnection.State.ToString())
        myConnection.Close()
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlConnection(string myConnString)
        {
        MySqlConnection myConnection = new MySqlConnection(myConnString);
        myConnection.Open();
        MessageBox.Show("ServerVersion: " + myConnection.ServerVersion +
        "\nState: " + myConnection.State.ToString());
        myConnection.Close();
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.CreateCommand">
            <summary>
      Creates and returns a <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object associated with the <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>.
    </summary><returns>
      A <see cref="T:MySql.Data.MySqlClient.MySqlCommand"/> object.
    </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.System#ICloneable#Clone">
            <summary>
            Creates a new MySqlConnection object with the exact same ConnectionString value
            </summary>
            <returns>A cloned MySqlConnection object</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.Close">
            <summary>Closes the connection to the database. This is the preferred method of closing any open connection.</summary><remarks>
      <para>
        The <B>Close</B> method rolls back any pending transactions. It then releases
        the connection to the connection pool, or closes the connection if connection
        pooling is disabled.
      </para>
      <para>
        An application can call <B>Close</B> more than one time. No exception is
        generated.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, opens it,
      displays some of its properties, then closes the connection.

      <code lang="vbnet">
        Public Sub CreateMySqlConnection(myConnString As String)
        Dim myConnection As New MySqlConnection(myConnString)
        myConnection.Open()
        MessageBox.Show("ServerVersion: " + myConnection.ServerVersion _
        + ControlChars.Cr + "State: " + myConnection.State.ToString())
        myConnection.Close()
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlConnection(string myConnString)
        {
        MySqlConnection myConnection = new MySqlConnection(myConnString);
        myConnection.Open();
        MessageBox.Show("ServerVersion: " + myConnection.ServerVersion +
        "\nState: " + myConnection.State.ToString());
        myConnection.Close();
        }
      </code>
    </example>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.GetSchema">
            <summary>
            Returns schema information for the data source of this <see cref="T:System.Data.Common.DbConnection"/>. 
            </summary>
            <returns>A <see cref="T:System.Data.DataTable"/> that contains schema information. </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.GetSchema(System.String)">
            <summary>
            Returns schema information for the data source of this 
            <see cref="T:System.Data.Common.DbConnection"/> using the specified string for the schema name. 
            </summary>
            <param name="collectionName">Specifies the name of the schema to return. </param>
            <returns>A <see cref="T:System.Data.DataTable"/> that contains schema information. </returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.GetSchema(System.String,System.String[])">
            <summary>
            Returns schema information for the data source of this <see cref="T:System.Data.Common.DbConnection"/>
            using the specified string for the schema name and the specified string array 
            for the restriction values. 
            </summary>
            <param name="collectionName">Specifies the name of the schema to return.</param>
            <param name="restrictionValues">Specifies a set of restriction values for the requested schema.</param>
            <returns>A <see cref="T:System.Data.DataTable"/> that contains schema information.</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.ClearPool(MySql.Data.MySqlClient.MySqlConnection)">
            <summary>Empties the connection pool associated with the specified connection.</summary><param name="connection">
      The <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> associated with the pool to be cleared.
    </param><remarks>
      <para>
        ClearPool clears the connection pool that is associated with the connection.
        If additional connections associated with connection are in use at the time of the call,
        they are marked appropriately and are discarded (instead of being returned to the pool)
        when Close is called on them.
      </para>
    </remarks>
        </member>
        <member name="M:MySql.Data.MySqlClient.MySqlConnection.ClearAllPools">
            <summary>Clears all connection pools.</summary><remarks>
      <para>
        ClearAllPools essentially performs a <see cref="M:MySql.Data.MySqlClient.MySqlConnection.ClearPool(MySql.Data.MySqlClient.MySqlConnection)"/> on all current connection
        pools.
      </para>
    </remarks>
        </member>
        <member name="E:MySql.Data.MySqlClient.MySqlConnection.InfoMessage">
            <summary>Occurs when MySQL returns warnings as a result of executing a command or query.</summary><remarks>
    </remarks>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.ServerThread">
            <summary>
            Returns the id of the server thread this connection is executing on
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.DataSource">
            <summary>
            Gets the name of the MySQL server to which to connect.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionTimeout">
            <summary>
      Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.
    </summary><exception cref="T:System.ArgumentException">The value set is less than 0.</exception><remarks>
      A value of 0 indicates no limit, and should be avoided in a
      <see cref="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString"/> because an attempt to connect
      will wait indefinitely.
    </remarks><example>
      The following example creates a MySqlConnection
      and sets some of its properties in the connection string.
      <code lang="vbnet">
        Public Sub CreateSqlConnection()
        Dim myConnection As New MySqlConnection()
        myConnection.ConnectionString = "Persist Security Info=False;Username=user;Password=pass;database=test1;server=localhost;Connect Timeout=30"
        myConnection.Open()
        End Sub
      </code>
      <code lang="C#">
        public void CreateSqlConnection()
        {
        MySqlConnection myConnection = new MySqlConnection();
        myConnection.ConnectionString = "Persist Security Info=False;Username=user;Password=pass;database=test1;server=localhost;Connect Timeout=30";
        myConnection.Open();
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.Database">
            <summary>Gets the name of the current database or the database to be used after a connection is opened.</summary><returns>The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.</returns><remarks>
      <para>
        The <B>Database</B> property does not update dynamically.
        If you change the current database using a SQL statement, then this property
        may reflect the wrong value.  If you change the current database using the <see cref="M:MySql.Data.MySqlClient.MySqlConnection.ChangeDatabase(System.String)"/>
        method, this property is updated to reflect the new database.
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and displays
      some of its read-only properties.

      <code lang="vbnet">
        Public Sub CreateMySqlConnection()
        Dim myConnString As String = _
        "Persist Security Info=False;database=test;server=localhost;user id=joeuser;pwd=pass"
        Dim myConnection As New MySqlConnection( myConnString )
        myConnection.Open()
        MessageBox.Show( "Server Version: " + myConnection.ServerVersion _
        + ControlChars.NewLine + "Database: " + myConnection.Database )
        myConnection.ChangeDatabase( "test2" )
        MessageBox.Show( "ServerVersion: " + myConnection.ServerVersion _
        + ControlChars.NewLine + "Database: " + myConnection.Database )
        myConnection.Close()
        End Sub
      </code>

      <code lang="C#">
        public void CreateMySqlConnection()
        {
        string myConnString =
        "Persist Security Info=False;database=test;server=localhost;user id=joeuser;pwd=pass";
        MySqlConnection myConnection = new MySqlConnection( myConnString );
        myConnection.Open();
        MessageBox.Show( "Server Version: " + myConnection.ServerVersion
        + "\nDatabase: " + myConnection.Database );
        myConnection.ChangeDatabase( "test2" );
        MessageBox.Show( "ServerVersion: " + myConnection.ServerVersion
        + "\nDatabase: " + myConnection.Database );
        myConnection.Close();
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.UseCompression">
            <summary>
            Indicates if this connection should use compression when communicating with the server.
            </summary>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.State">
            <summary>Gets the current state of the connection.</summary><returns>
      A bitwise combination of the <see cref="T:System.Data.ConnectionState"/> values. The default is <B>Closed</B>.
    </returns><remarks>
      The allowed state changes are:
      <list type="bullet">
        <item>
          From <B>Closed</B> to <B>Open</B>, using the <B>Open</B> method of the connection object.
        </item>
        <item>
          From <B>Open</B> to <B>Closed</B>, using either the <B>Close</B> method or the <B>Dispose</B> method of the connection object.
        </item>
      </list>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, opens it,
      displays some of its properties, then closes the connection.

      <code lang="vbnet">
        Public Sub CreateMySqlConnection(myConnString As String)
        Dim myConnection As New MySqlConnection(myConnString)
        myConnection.Open()
        MessageBox.Show("ServerVersion: " + myConnection.ServerVersion _
        + ControlChars.Cr + "State: " + myConnection.State.ToString())
        myConnection.Close()
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlConnection(string myConnString)
        {
        MySqlConnection myConnection = new MySqlConnection(myConnString);
        myConnection.Open();
        MessageBox.Show("ServerVersion: " + myConnection.ServerVersion +
        "\nState: " + myConnection.State.ToString());
        myConnection.Close();
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.ServerVersion">
            <summary>Gets a string containing the version of the MySQL server to which the client is connected.</summary><returns>The version of the instance of MySQL.</returns><exception cref="T:System.InvalidOperationException">The connection is closed.</exception><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>, opens it,
      displays some of its properties, then closes the connection.

      <code lang="vbnet">
        Public Sub CreateMySqlConnection(myConnString As String)
        Dim myConnection As New MySqlConnection(myConnString)
        myConnection.Open()
        MessageBox.Show("ServerVersion: " + myConnection.ServerVersion _
        + ControlChars.Cr + "State: " + myConnection.State.ToString())
        myConnection.Close()
        End Sub
      </code>
      <code lang="C#">
        public void CreateMySqlConnection(string myConnString)
        {
        MySqlConnection myConnection = new MySqlConnection(myConnString);
        myConnection.Open();
        MessageBox.Show("ServerVersion: " + myConnection.ServerVersion +
        "\nState: " + myConnection.State.ToString());
        myConnection.Close();
        }
      </code>
    </example>
        </member>
        <member name="P:MySql.Data.MySqlClient.MySqlConnection.ConnectionString">
            <summary>
      Gets or sets the string used to connect to a MySQL Server database.
    </summary><remarks>
      <para>
        The <B>ConnectionString</B> returned may not be exactly like what was originally
        set but will be indentical in terms of keyword/value pairs.  Security information
        will not be included unless the Persist Security Info value is set to true.
      </para>
      <para>
        You can use the <B>ConnectionString</B> property to connect to a database.
        The following example illustrates a typical connection string.
      </para>
      <c>"Persist Security Info=False;database=MyDB;server=MySqlServer;user id=myUser;Password=myPass"</c>
      <para>
        The <B>ConnectionString</B> property can be set only when the connection is
        closed. Many of the connection string values have corresponding read-only
        properties. When the connection string is set, all of these properties are
        updated, except when an error is detected. In this case, none of the properties
        are updated. <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> properties return only those settings contained in the
        <B>ConnectionString</B>.
      </para>
      <para>
        To connect to a local machine, specify "localhost" for the server. If you do not
        specify a server, localhost is assumed.
      </para>
      <para>
        Resetting the <B>ConnectionString</B> on a closed connection resets all
        connection string values (and related properties) including the password. For
        example, if you set a connection string that includes "Database= MyDb", and
        then reset the connection string to "Data Source=myserver;User Id=myUser;Password=myPass",
        the <see cref="P:MySql.Data.MySqlClient.MySqlConnection.Database"/> property is no longer set to MyDb.
      </para>
      <para>
        The connection string is parsed immediately after being set. If errors in
        syntax are found when parsing, a runtime exception, such as <see cref="T:System.ArgumentException"/>,
        is generated. Other errors can be found only when an attempt is made to open the
        connection.
      </para>
      <para>
        The basic format of a connection string consists of a series of keyword/value
        pairs separated by semicolons. The equal sign (=) connects each keyword and its
        value. To include values that contain a semicolon, single-quote character, or
        double-quote character, the value must be enclosed in double quotes. If the
        value contains both a semicolon and a double-quote character, the value can be
        enclosed in single quotes. The single quote is also useful if the value begins
        with a double-quote character. Conversely, the double quote can be used if the
        value begins with a single quote. If the value contains both single-quote and
        double-quote characters, the quote character used to enclose the value must be
        doubled each time it occurs within the value.
      </para>
      <para>
        To include preceding or trailing spaces in the string value, the value must
        be enclosed in either single quotes or double quotes. Any leading or trailing
        spaces around integer, Boolean, or enumerated values are ignored, even if
        enclosed in quotes. However, spaces within a string literal keyword or value are
        preserved. Using .NET Framework version 1.1, single or double quotes may be used
        within a connection string without using delimiters (for example, Data Source=
        my'Server or Data Source= my"Server), unless a quote character is the first or
        last character in the value.
      </para>
      <para>
        To include an equal sign (=) in a keyword or value, it must be preceded by
        another equal sign. For example, in the hypothetical connection string
      </para>
      <c>"key==word=value"</c>
      <para></para>
      <para>the keyword is "key=word" and the value is "value".</para>
      <para>
        If a specific keyword in a keyword= value pair occurs multiple times in a
        connection string, the last occurrence listed is used in the value set.
      </para>
      <para>Keywords are not case sensitive.</para>
      <para>
        The following table lists the valid names for keyword values within the
        <B>ConnectionString</B>.
      </para>

      <div class="tablediv">
        <table class="dtTABLE" cellspacing="0">
          <tr valign="top">
            <th width="33%">Name</th>
            <th width="33%">Default</th>
            <th width="33%">Description</th>
          </tr>
          <tr>
            <td>
              Connect Timeout<para>  -or-  </para>Connection Timeout
            </td>
            <td>15</td>
            <td>
              The length of time (in seconds) to wait for a connection to the server before
              terminating the attempt and generating an error.
            </td>
          </tr>
          <tr>
            <td>
              Host<para>  -or-  </para>Server<para>  -or-  </para>Data Source<para>  -or-  </para>
              DataSource<para>  -or-  </para>Address<para>  -or-  </para>Addr<para>  -or-  </para>
              Network Address
            </td>
            <td>localhost</td>
            <td>
              <para>
                The name or network address of the instance of MySQL to which to connect.  Multiple hosts can be
                specified separated by &amp;.  This can be useful where multiple MySQL servers are configured for replication
                and you are not concerned about the precise server you are connecting to.  No attempt is made by the provider to
                synchronize writes to the database so care should be taken when using this option.
              </para>
              <para>
                In Unix environment with Mono, this can be a fully qualified path to MySQL socket filename. With this configuration, the Unix socket will be used instead of TCP/IP socket.
                Currently only a single socket name can be given so accessing MySQL in a replicated environment using Unix sockets is not currently supported.
              </para>
            </td>
          </tr>
          <tr>
            <td>Port</td>
            <td>3306</td>
            <td>
              The port MySQL is using to listen for connections.  This value is ignored if the connection protocol 
              is anything but socket.
            </td>
          </tr>
          <tr>
            <td>Protocol</td>
            <td>socket</td>
            <td>
              Specifies the type of connection to make to the server.<para>Values can be:</para>
              socket or tcp for a socket connection<br/>
              pipe for a named pipe connection<br/>
              unix for a Unix socket connection<br/>
              memory to use MySQL shared memory
            </td>
          </tr>
          <tr>
            <td>
              CharSet<para>  -or  </para>Character Set
            </td>
            <td></td>
            <td>
              Specifies the character set that should be used to encode all queries sent to the server.
              Resultsets are still returned in the character set of the data returned.
            </td>
          </tr>
          <tr>
            <td>Logging</td>
            <td>false</td>
            <td>When true, various pieces of information is output to any configured TraceListeners.</td>
          </tr>
          <tr>
            <td>Allow Batch</td>
            <td>true</td>
            <td>
              When true, multiple SQL statements can be sent with one command execution.<br/><br/>
              -Note-<br/>
              Starting with MySQL 4.1.1, batch statements should be separated by the server-defined seperator character.<br/>
              Commands sent to earlier versions of MySQL should be seperated with ';'.
            </td>
          </tr>
          <tr>
            <td>Encrypt</td>
            <td>false</td>
            <td>
              When <B>true</B>, SSL/TLS encryption is used for all data sent between the
              client and server if the server has a certificate installed. Recognized values
              are <B>true</B>, <B>false</B>, <B>yes</B>, and <B>no</B>.
            </td>
          </tr>
          <tr>
            <td>
              Initial Catalog<para>  -or-  </para>Database
            </td>
            <td>mysql</td>
            <td>The name of the database to use intially</td>
          </tr>
          <tr>
            <td>
              Password<para>  -or-  </para>pwd
            </td>
            <td></td>
            <td>The password for the MySQL account being used.</td>
          </tr>
          <tr>
            <td>Persist Security Info</td>
            <td>false</td>
            <td>
              When set to <B>false</B> or <B>no</B> (strongly recommended), security-sensitive
              information, such as the password, is not returned as part of the connection if
              the connection is open or has ever been in an open state. Resetting the
              connection string resets all connection string values including the password.
              Recognized values are <B>true</B>, <B>false</B>, <B>yes</B>, and <B>no</B>.
            </td>
          </tr>
          <tr>
            <td>
              User Id<para>  -or-  </para>Username<para>  -or-  </para>Uid<para>  -or-  </para>User name
            </td>
            <td></td>
            <td>The MySQL login account being used.</td>
          </tr>
          <tr>
            <td>Shared Memory Name</td>
            <td>MYSQL</td>
            <td>The name of the shared memory object to use for communication if the connection protocol is set to memory.</td>
          </tr>
          <tr>
            <td>Allow Zero Datetime</td>
            <td>false</td>
            <td>
              True to have MySqlDataReader.GetValue() return a MySqlDateTime for date or datetime columns that have illegal values.
              False will cause a DateTime object to be returned for legal values and an exception will be thrown for illegal values.
            </td>
          </tr>
          <tr>
            <td>Convert Zero Datetime</td>
            <td>false</td>
            <td>
              True to have MySqlDataReader.GetValue() and MySqlDataReader.GetDateTime()
              return DateTime.MinValue for date or datetime columns that have illegal values.
            </td>
          </tr>
          <tr>
            <td>
              Pipe Name<para>  -or-  </para>Pipe
            </td>
            <td>mysql</td>
            <td>
              When set to the name of a named pipe, the <B>MySqlConnection</B> will attempt to connect to MySQL
              on that named pipe.<br/><br/>This settings only applies to the Windows platform.
            </td>
          </tr>
          <tr>
            <td>
              Use Performance Monitor<para>  -or-  </para>UsePerformanceMonitor
            </td>
            <td>false</td>
            <td>
              Posts performance data that can be tracked using perfmon
            </td>
          </tr>
          <tr>
            <td>
              Procedure Cache Size
            </td>
            <td>25</td>
            <td>
              How many stored procedure definitions can be held in the cache
            </td>
          </tr>
          <tr>
            <td>
              Ignore Prepare
            </td>
            <td>true</td>
            <td>
              Instructs the provider to ignore any attempts to prepare commands.  This option
              was added to allow a user to disable prepared statements in an entire application
              without modifying the code.  A user might want to do this if errors or bugs are
              encountered with MySQL prepared statements.
            </td>
          </tr>
          <tr>
            <td>Use Procedure Bodies</td>
            <td>true</td>
            <td>
              Instructs the provider to attempt to call the procedure without first resolving the metadata.  Thjis
              is useful in situations where the calling user does not have access to the mysql.proc table.  To
              use this mode, the parameters for the procedure must be added to the command in the same order
              as they appear in the procedure definition and their types must be explicitly set.
            </td>
          </tr>
          <tr>
            <td>Auto Enlist</td>
            <td>true</td>
            <td>
              Indicates whether the connection should automatically enlist in the current transaction,
              if there is one.
            </td>
          </tr>
          <tr>
            <td>Respect Binary Flags</td>
            <td>true</td>
            <td>
              Indicates whether the connection should respect all binary flags sent to the client
              as part of column metadata.  False will cause the connector to behave like
              Connector/Net 5.0 and earlier.
            </td>
          </tr>
          <tr>
            <td>BlobAsUTF8IncludePattern</td>
            <td>null</td>
            <td>
              Pattern that should be used to indicate which blob columns should be treated as UTF-8.
            </td>
          </tr>
          <tr>
            <td>BlobAsUTF8ExcludePattern</td>
            <td>null</td>
            <td>
              Pattern that should be used to indicate which blob columns should not be treated as UTF-8.
            </td>
          </tr>
          <tr>
            <td>Default Command Timeout</td>
            <td>30</td>
            <td>
              The default timeout that new MySqlCommand objects will use unless changed.
            </td>
          </tr>
          <tr>
            <td>Allow User Variables</td>
            <td>false</td>
            <td>
              Should the provider expect user variables in the SQL.
            </td>
          </tr>
          <tr>
            <td>Interactive -or- Interactive Session</td>
            <td>false</td>
            <td>
              Should this session be considered interactive?
            </td>
          </tr>
        </table>
      </div>
      <para>
        The following table lists the valid names for connection pooling values within
        the <B>ConnectionString</B>. For more information about connection pooling, see
        Connection Pooling for the MySql Data Provider.
      </para>
      <div class="tablediv">
        <table class="dtTABLE" cellspacing="0">
          <tr valign="top">
            <th width="33%">Name</th>
            <th width="33%">Default</th>
            <th width="33%">Description</th>
          </tr>
          <tr>
            <td>Connection Lifetime</td>
            <td>0</td>
            <td>
              When a connection is returned to the pool, its creation time is compared with
              the current time, and the connection is destroyed if that time span (in seconds)
              exceeds the value specified by <B>Connection Lifetime</B>. This is useful in
              clustered configurations to force load balancing between a running server and a
              server just brought online.
              <para>
                A value of zero (0) causes pooled connections to have the maximum connection
                timeout.
              </para>
            </td>
          </tr>
          <tr>
            <td>Max Pool Size</td>
            <td>100</td>
            <td>The maximum number of connections allowed in the pool.</td>
          </tr>
          <tr>
            <td>Min Pool Size</td>
            <td>0</td>
            <td>The minimum number of connections allowed in the pool.</td>
          </tr>
          <tr>
            <td>Pooling</td>
            <td>true</td>
            <td>
              When <B>true</B>, the <B>MySqlConnection</B> object is drawn from the appropriate
              pool, or if necessary, is created and added to the appropriate pool. Recognized
              values are <B>true</B>, <B>false</B>, <B>yes</B>, and <B>no</B>.
            </td>
          </tr>
          <tr>
            <td>Connection Reset</td>
            <td>false</td>
            <td>
              Specifies whether the database connection should be reset when being
              drawn from the pool.  Leaving this as <b>false</b> will yeild much faster
              connection opens but the user should understand the side effects
              of doing this such as temporary tables and user variables from the previous
              session not being cleared out.
            </td>
          </tr>
        </table>
      </div>
      <para>
        When setting keyword or connection pooling values that require a Boolean
        value, you can use 'yes' instead of 'true', and 'no' instead of 'false'.
      </para>
      <para>
        <B>Note</B>  The MySql Data Provider uses the native socket protocol to
        communicate with MySQL.  Therefore, it does not support the use of an ODBC data source name (DSN) when
        connecting to MySQL because it does not add an ODBC layer.
      </para>
      <para>
        <B>CAUTION</B>  In this release, the application should use caution when constructing a
        connection string based on user input (for example when retrieving user ID and password information from a
        dialog box, and appending it to the connection string). The application should
        ensure that a user cannot embed extra connection string parameters in these
        values (for example, entering a password as "validpassword;database=somedb" in
        an attempt to attach to a different database).
      </para>
    </remarks><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> and sets some of its properties
      <code lang="vbnet">
        Public Sub CreateConnection()
        Dim myConnection As New MySqlConnection()
        myConnection.ConnectionString = "Persist Security Info=False;database=myDB;server=myHost;Connect Timeout=30;user id=myUser; pwd=myPass"
        myConnection.Open()
        End Sub 'CreateConnection
      </code>
      <code lang="C#">
        public void CreateConnection()
        {
        MySqlConnection myConnection = new MySqlConnection();
        myConnection.ConnectionString = "Persist Security Info=False;database=myDB;server=myHost;Connect Timeout=30;user id=myUser; pwd=myPass";
        myConnection.Open();
        }
      </code>
    </example><example>
      The following example creates a <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/> in Unix environment with Mono installed. MySQL socket filename used in this example is "/var/lib/mysql/mysql.sock". The actual filename depends on your MySQL configuration.
      <code lang="vbnet">
        Public Sub CreateConnection()
        Dim myConnection As New MySqlConnection()
        myConnection.ConnectionString = "database=myDB;server=/var/lib/mysql/mysql.sock;user id=myUser; pwd=myPass"
        myConnection.Open()
        End Sub 'CreateConnection
      </code>
      <code lang="C#">
        public void CreateConnection()
        {
        MySqlConnection myConnection = new MySqlConnection();
        myConnection.ConnectionString = "database=myDB;server=/var/lib/mysql/mysql.sock;user id=myUser; pwd=myPass";
        myConnection.Open();
        }
      </code>
    </example>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlInfoMessageEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:MySql.Data.MySqlClient.MySqlConnection.InfoMessage"/> event of a 
            <see cref="T:MySql.Data.MySqlClient.MySqlConnection"/>.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.MySqlInfoMessageEventArgs">
            <summary>
            Provides data for the InfoMessage event. This class cannot be inherited.
            </summary>
        </member>
        <member name="F:MySql.Data.MySqlClient.MySqlInfoMessageEventArgs.errors">
            <summary>
            
            </summary>
        </member>
        <member name="T:MySql.Data.Common.DBVersion">
            <summary>
            Summary description for Version.
            </summary>
        </member>
        <member name="T:MySql.Data.MySqlClient.CharSetMap">
            <summary>
            Summary description for CharSetMap.
            </summary>
        </member>
        <member name="M:MySql.Data.MySqlClient.CharSetMap.GetEncoding(MySql.Data.Common.DBVersion,System.String)">
            <summary>
            Returns the text encoding for a given MySQL character set name
            </summary>
            <param name="version">Version of the connection requesting the encoding</param>
            <param name="CharSetName">Name of the character set to get the encoding for</param>
            <returns>Encoding object for the given character set name</returns>
        </member>
        <member name="M:MySql.Data.MySqlClient.CharSetMap.InitializeMapping">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
